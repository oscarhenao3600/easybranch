const { HfInference } = require('@huggingface/inference');
const fetch = require('node-fetch');
const LoggerService = require('./LoggerService');

class AIService {
  constructor() {
    this.hf = null;
    this.modelName = 'microsoft/DialoGPT-medium';
    this.useHuggingFace = false;
    this.menuContent = new Map();
    this.aiPrompts = new Map();
    this.conversationHistory = new Map();
    this.maxHistoryLength = 10;
    this.logger = new LoggerService();
  }

  // Configurar Hugging Face
  configureHuggingFace(apiKey, modelName = null) {
    if (apiKey) {
      this.hf = new HfInference(apiKey);
      this.useHuggingFace = true;
      if (modelName) {
        this.modelName = modelName;
      }
      this.logger.info('‚úÖ Hugging Face configurado');
    } else {
      this.hf = null;
      this.useHuggingFace = false;
      this.logger.info('‚ö†Ô∏è Hugging Face deshabilitado');
    }
  }

  // Configurar contenido del men√∫ para una sucursal
  setMenuContent(branchId, content) {
    this.menuContent.set(branchId, content);
    this.logger.ai(branchId, 'üìã Men√∫ configurado');
  }

  // Limpiar contenido del men√∫ para una sucursal
  clearMenuContent(branchId) {
    this.menuContent.delete(branchId);
    this.logger.ai(branchId, 'üóëÔ∏è Men√∫ eliminado');
  }

  // Configurar prompt personalizado para una sucursal
  setAIPrompt(branchId, prompt) {
    this.aiPrompts.set(branchId, prompt);
    this.logger.ai(branchId, 'ü§ñ Prompt de IA configurado');
  }

  // Obtener prompt personalizado o usar uno por defecto
  getPrompt(branchId, businessType = 'restaurant') {
    const customPrompt = this.aiPrompts.get(branchId);
    if (customPrompt) {
      return customPrompt;
    }

    // Prompts por defecto seg√∫n tipo de negocio
    const defaultPrompts = {
      restaurant: `Eres un asistente virtual amigable de un restaurante. 
      Tu objetivo es ayudar a los clientes con sus consultas sobre el men√∫, precios, pedidos y cualquier otra pregunta relacionada con nuestros servicios.
      
      Debes ser:
      - Amigable y profesional
      - √ötil y preciso en tus respuestas
      - Capaz de sugerir productos del men√∫
      - Ayudar con el proceso de pedidos
      - Responder preguntas sobre precios y disponibilidad
      
      Responde de manera natural y conversacional, como si fueras un empleado amigable del restaurante.`,
      
      cafe: `Eres un asistente virtual amigable de una cafeter√≠a. 
      Ayuda a los clientes con consultas sobre bebidas, pasteler√≠a, horarios y pedidos.
      
      Debes ser:
      - Conocedor de caf√© y bebidas
      - Sugerir combinaciones de bebidas y postres
      - Informar sobre horarios de atenci√≥n
      - Ayudar con pedidos para llevar o consumo en sitio`,
      
      pharmacy: `Eres un asistente virtual de una farmacia. 
      Ayuda a los clientes con consultas sobre medicamentos, productos de cuidado personal y servicios farmac√©uticos.
      
      Debes ser:
      - Profesional y discreto
      - Informar sobre disponibilidad de productos
      - Recordar que no puedes dar diagn√≥sticos m√©dicos
      - Sugerir consultar con un profesional de la salud cuando sea necesario`,
      
      grocery: `Eres un asistente virtual de una tienda de v√≠veres. 
      Ayuda a los clientes con consultas sobre productos, precios, disponibilidad y pedidos.
      
      Debes ser:
      - Conocedor de productos de consumo
      - Informar sobre ofertas y promociones
      - Ayudar con listas de compras
      - Sugerir productos complementarios`
    };

    return defaultPrompts[businessType] || defaultPrompts.restaurant;
  }

  // Generar respuesta usando IA con configuraci√≥n espec√≠fica de sucursal
  async generateResponse(branchId, userMessage, clientId = null, businessType = 'restaurant', branchConfig = null) {
    try {
      console.log('ü§ñ ===== GENERANDO RESPUESTA IA CONTEXTUALIZADA =====');
      console.log('üè™ Branch ID:', branchId);
      console.log('üí¨ User Message:', userMessage);
      console.log('üè¢ Business Type:', businessType);
      console.log('‚öôÔ∏è Branch Config:', branchConfig ? 'Disponible' : 'No disponible');
      console.log('==================================================');

      // Usar configuraci√≥n espec√≠fica de la sucursal si est√° disponible
      let menuContent = '';
      let customPrompt = '';
      let businessSettings = {};

      if (branchConfig) {
        menuContent = branchConfig.menuContent || '';
        customPrompt = branchConfig.customPrompt || '';
        businessSettings = branchConfig.businessSettings || {};
        businessType = businessSettings.businessType || businessType;
        
        console.log('üìã Menu Content:', menuContent ? 'Disponible' : 'No disponible');
        console.log('üéØ Custom Prompt:', customPrompt ? 'Disponible' : 'No disponible');
        console.log('‚öôÔ∏è Business Settings:', Object.keys(businessSettings).length > 0 ? 'Disponible' : 'No disponible');
      } else {
        // Usar configuraci√≥n b√°sica
        menuContent = this.menuContent.get(branchId) || '';
        customPrompt = this.aiPrompts.get(branchId) || '';
      }

      // Construir prompt contextualizado
      const prompt = this.buildContextualizedPrompt(branchId, businessType, customPrompt, businessSettings);
      
      // Crear contexto solo con el men√∫ (sin el prompt)
      const fullContext = this.buildMenuContext(menuContent, userMessage);
      
      // Intentar usar Hugging Face primero
      if (this.useHuggingFace && this.hf) {
        try {
          const response = await this.callHuggingFace(fullContext, userMessage, clientId);
          this.logger.ai(branchId, 'ü§ñ Respuesta Hugging Face generada');
          return response;
        } catch (hfError) {
          this.logger.warn(`Error con Hugging Face, usando simulaci√≥n: ${hfError.message}`);
          const response = await this.callContextualizedAI(fullContext, userMessage, businessType, businessSettings, customPrompt);
          this.logger.ai(branchId, 'ü§ñ Respuesta simulaci√≥n contextualizada generada');
          return response;
        }
      } else {
        // Usar simulaci√≥n inteligente contextualizada
        const response = await this.callContextualizedAI(fullContext, userMessage, businessType, businessSettings, customPrompt);
        this.logger.ai(branchId, 'ü§ñ Respuesta simulaci√≥n contextualizada generada');
        return response;
      }
      
    } catch (error) {
      this.logger.error(`Error generando respuesta IA para ${branchId}:`, error);
      return this.getFallbackResponse(userMessage, businessType);
    }
  }

  // Construir prompt contextualizado para la sucursal
  buildContextualizedPrompt(branchId, businessType, customPrompt, businessSettings) {
    if (customPrompt) {
      return customPrompt;
    }

    // Construir prompt basado en configuraci√≥n espec√≠fica
    let prompt = `Eres un asistente virtual especializado para esta sucursal espec√≠fica. `;
    
    if (businessSettings.messages && businessSettings.messages.welcome) {
      prompt += `Tu mensaje de bienvenida personalizado es: "${businessSettings.messages.welcome}". `;
    }
    
    if (businessSettings.businessHours) {
      const hours = businessSettings.businessHours;
      prompt += `Nuestros horarios de atenci√≥n son: `;
      
      // Handle both Map and Object formats
      const hoursData = hours instanceof Map ? hours : hours;
      const days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
      
      days.forEach(day => {
        const dayData = hoursData.get ? hoursData.get(day) : hoursData[day];
        if (dayData && dayData.isOpen) {
          prompt += `${day}: ${dayData.open} - ${dayData.close}, `;
        }
      });
      prompt += `. `;
    }
    
    if (businessSettings.deliverySettings && businessSettings.deliverySettings.enabled) {
      prompt += `Ofrecemos servicio a domicilio con tiempo de entrega de ${businessSettings.deliverySettings.deliveryTime}. `;
      if (businessSettings.deliverySettings.minimumOrder > 0) {
        prompt += `Pedido m√≠nimo: $${businessSettings.deliverySettings.minimumOrder}. `;
      }
    }
    
    prompt += `Debes ser amigable, profesional y espec√≠fico a esta sucursal. `;
    prompt += `Responde de manera natural y conversacional, como si fueras un empleado de esta sucursal espec√≠fica.`;
    
    return prompt;
  }

  // Construir contexto completo (solo para HuggingFace)
  buildContext(prompt, menuContent, userMessage) {
    let context = prompt;
    
    if (menuContent) {
      context += `\n\nINFORMACI√ìN DEL MEN√ö:\n${menuContent}\n\n`;
    }
    
    context += `\nMENSAJE DEL CLIENTE: ${userMessage}\n\nRESPUESTA:`;
    
    return context;
  }

  // Construir contexto solo con el men√∫ (para respuestas contextualizadas)
  buildMenuContext(menuContent, userMessage) {
    let context = '';
    
    if (menuContent) {
      context += menuContent;
    }
    
    return context;
  }

  // Llamar a Hugging Face
  async callHuggingFace(context, userMessage, clientId) {
    try {
      // Obtener historial de conversaci√≥n
      const history = this.getConversationHistory(clientId);
      
      // Crear prompt mejorado
      const enhancedPrompt = this.createEnhancedPrompt(context, userMessage, history);
      
      // Llamar al modelo
      const response = await this.hf.textGeneration({
        model: this.modelName,
        inputs: enhancedPrompt,
        parameters: {
          max_new_tokens: 150,
          temperature: 0.7,
          do_sample: true,
          top_p: 0.9,
          repetition_penalty: 1.1
        }
      });
      
      const aiResponse = response.generated_text || 'Gracias por contactarnos. ¬øEn qu√© puedo ayudarte?';
      
      // Guardar en historial
      this.addToConversationHistory(clientId, userMessage, aiResponse);
      
      return aiResponse;
      
    } catch (error) {
      this.logger.error('Error llamando a Hugging Face:', error);
      throw error;
    }
  }

  // Simulaci√≥n de IA contextualizada
  async callContextualizedAI(context, userMessage, businessType, businessSettings = {}, customPrompt = '') {
    const lowerMessage = userMessage.toLowerCase();
    
    console.log('ü§ñ ===== PROCESANDO CON IA CONTEXTUALIZADA =====');
    console.log('üí¨ User Message:', userMessage);
    console.log('üè¢ Business Type:', businessType);
    console.log('‚öôÔ∏è Business Settings:', Object.keys(businessSettings).length > 0 ? 'Disponible' : 'No disponible');
    console.log('üìã Context:', context.substring(0, 200) + '...');
    console.log('üéØ Custom Prompt:', customPrompt ? 'Disponible' : 'No disponible');
    console.log('===============================================');
    
    // PRIORIDAD 1: Verificar si es un pedido espec√≠fico ANTES de usar respuestas hardcodeadas
    if (this.isOrderRequest(userMessage)) {
      console.log('üõí Detectado pedido espec√≠fico - procesando...');
      return this.processOrder(userMessage, context, businessSettings);
    }
    
    // PRIORIDAD 2: Comprensi√≥n sem√°ntica para consultas espec√≠ficas
    if (lowerMessage.includes('tragos') || lowerMessage.includes('alcoh√≥licas') || lowerMessage.includes('alcoholicas') || 
        lowerMessage.includes('cerveza') || lowerMessage.includes('aguardiente') || lowerMessage.includes('whisky') || 
        lowerMessage.includes('ron') || lowerMessage.includes('vino') || lowerMessage.includes('licor')) {
      return `¬°Hola! Me da mucho gusto que quieras disfrutar üç∑\n\nSin embargo, debo informarte que somos una cafeter√≠a especializada en caf√© y comida, no vendemos bebidas alcoh√≥licas.\n\n¬øTe gustar√≠a en su lugar?\n‚Ä¢ Caf√©s especiales para compartir\n‚Ä¢ Bebidas fr√≠as refrescantes\n‚Ä¢ Postres deliciosos\n‚Ä¢ Entradas para picar\n\n¬øQu√© les parece si les preparo algo especial? üòä`;
    }
    
    // Comprensi√≥n sem√°ntica para consultas sobre men√∫ espec√≠fico
    if (lowerMessage.includes('lista de') && (lowerMessage.includes('bebidas') || lowerMessage.includes('menu'))) {
      if (lowerMessage.includes('alcoh√≥licas') || lowerMessage.includes('alcoholicas') || lowerMessage.includes('acholicas')) {
        return `Me da pena, pero no tenemos bebidas alcoh√≥licas en nuestro men√∫. Somos una cafeter√≠a especializada en caf√© y comida.\n\n¬øTe interesa conocer nuestras opciones disponibles?\n‚Ä¢ Bebidas fr√≠as refrescantes\n‚Ä¢ Caf√©s especiales\n‚Ä¢ Jugos naturales\n‚Ä¢ Postres\n\n¬øQu√© te gustar√≠a probar? üòä`;
      }
      return this.generateMenuBasedResponse(context, userMessage);
    }
    
    // Patr√≥n espec√≠fico para "bibidas acholicas" (con error de ortograf√≠a)
    if (lowerMessage.includes('bibidas') && lowerMessage.includes('acholicas')) {
      return `Me da pena, pero no tenemos bebidas alcoh√≥licas en nuestro men√∫. Somos una cafeter√≠a especializada en caf√© y comida.\n\n¬øTe interesa conocer nuestras opciones disponibles?\n‚Ä¢ Bebidas fr√≠as refrescantes\n‚Ä¢ Caf√©s especiales\n‚Ä¢ Jugos naturales\n‚Ä¢ Postres\n\n¬øQu√© te gustar√≠a probar? üòä`;
    }
    
    // Comprensi√≥n sem√°ntica para consultas sobre disponibilidad
    if (lowerMessage.includes('tienes') && (lowerMessage.includes('bebidas') || lowerMessage.includes('tragos'))) {
      if (lowerMessage.includes('alcoh√≥licas') || lowerMessage.includes('alcoholicas') || lowerMessage.includes('cerveza')) {
        return `Entiendo que buscas bebidas alcoh√≥licas, pero como cafeter√≠a no manejamos ese tipo de productos.\n\nEn su lugar, puedo ofrecerte:\n‚Ä¢ Cerveza sin alcohol (si la tenemos)\n‚Ä¢ Bebidas refrescantes naturales\n‚Ä¢ Caf√©s especiales\n‚Ä¢ Jugos naturales\n\n¬øTe gustar√≠a que te recomiende algo refrescante para disfrutar? üåø`;
      }
    }
    
    // USAR EL PROMPT PERSONALIZADO SI EST√Å DISPONIBLE
    if (customPrompt && customPrompt.trim()) {
      console.log('üéØ Usando prompt personalizado para respuesta contextualizada');
      
      // Detectar tipo de consulta y responder apropiadamente usando el prompt personalizado
      if (lowerMessage.includes('hola') || lowerMessage.includes('buenos d√≠as') || lowerMessage.includes('buenas') || lowerMessage.includes('buen dia') || lowerMessage.includes('buenas tardes') || lowerMessage.includes('holi') || lowerMessage.includes('hey') || lowerMessage.includes('hi')) {
        return `¬°Holi! üòä ¬øC√≥mo est√°s?\n\n¬øEn qu√© puedo ayudarte hoy? Puedes preguntarme sobre:\n‚Ä¢ Nuestro men√∫\n‚Ä¢ Hacer un pedido\n‚Ä¢ Precios\n‚Ä¢ Informaci√≥n de env√≠o\n\n¬°Estoy aqu√≠ para ayudarte! ‚òï`;
      } else if (lowerMessage.includes('partido') || lowerMessage.includes('futbol') || lowerMessage.includes('deportes') || lowerMessage.includes('colombia')) {
        return `¬°Perfecto para ver el partido! ‚öΩ\n\nTe recomiendo opciones ideales para disfrutar durante el juego:\n\nüçø *SNACKS*\n‚Ä¢ Brownie de Chocolate - $3.200\n‚Ä¢ Muffin de Ar√°ndanos - $2.500\n‚Ä¢ Galletas - $1.000\n\n‚òï *BEBIDAS*\n‚Ä¢ Caf√© Americano - $3.500\n‚Ä¢ Frapp√© de Vainilla - $4.800\n‚Ä¢ Limonada Natural - $3.000\n\nü•™ *ENTRADAS*\n‚Ä¢ Club Sandwich - $8.500\n‚Ä¢ Panini de Pollo - $7.200\n\n¬øCu√°ntas personas ser√°n? Te ayudo a armar el pedido perfecto para el partido.`;
      } else {
        // Para otras consultas, usar el contenido del men√∫
        return this.generateMenuBasedResponse(context, userMessage);
      }
    }
    
    // FALLBACK: Respuestas gen√©ricas si no hay prompt personalizado
    if (lowerMessage.includes('hola') || lowerMessage.includes('buenos d√≠as') || lowerMessage.includes('buenas') || lowerMessage.includes('buen dia') || lowerMessage.includes('holi') || lowerMessage.includes('hey') || lowerMessage.includes('hi')) {
      return `¬°Holi! üòä ¬øC√≥mo est√°s?\n\n¬øEn qu√© puedo ayudarte hoy? Puedes preguntarme sobre:\n‚Ä¢ Nuestro men√∫\n‚Ä¢ Hacer un pedido\n‚Ä¢ Precios\n‚Ä¢ Informaci√≥n de env√≠o\n\n¬°Estoy aqu√≠ para ayudarte! ‚òï`;
    }
    
    if (lowerMessage.includes('reuni√≥n') || lowerMessage.includes('reunion') || lowerMessage.includes('amigos') || lowerMessage.includes('grupo')) {
      return `üë• *PERFECTO PARA REUNIONES*\n\nPara una reuni√≥n de amigos te recomiendo:\n\n‚òï *CAF√âS*\n‚Ä¢ Cappuccino - $4.000\n‚Ä¢ Caf√© Latte - $4.200\n‚Ä¢ Caf√© Americano - $3.500\n\nü•™ *ENTRADAS*\n‚Ä¢ Club Sandwich - $8.500\n‚Ä¢ Panini de Pollo - $7.200\n‚Ä¢ Bagel con Queso Crema - $4.500\n\nüç∞ *POSTRES*\n‚Ä¢ Brownie de Chocolate - $3.200\n‚Ä¢ Cheesecake de Fresa - $4.800\n\n¬øCu√°ntas personas ser√°n? Te ayudo a calcular el pedido completo.`;
    }
    
    // Respuestas espec√≠ficas para refrigerios y grupos
    if (lowerMessage.includes('refrigerio') || lowerMessage.includes('8 personas') || lowerMessage.includes('grupo')) {
      return `üë• *PERFECTO PARA REFRIGERIOS*\n\nPara un refrigerio de 8 personas te recomiendo:\n\n‚òï *CAF√âS*\n‚Ä¢ Cappuccino - $4.000\n‚Ä¢ Caf√© Latte - $4.200\n‚Ä¢ Caf√© Americano - $3.500\n\nü•§ *BEBIDAS FR√çAS*\n‚Ä¢ Frapp√© de Vainilla - $4.800\n‚Ä¢ Frapp√© de Chocolate - $5.200\n‚Ä¢ Limonada Natural - $3.000\n\nüç∞ *POSTRES DULCES*\n‚Ä¢ Brownie de Chocolate - $3.200\n‚Ä¢ Cheesecake de Fresa - $4.800\n‚Ä¢ Tiramis√∫ - $5.200\n\nü•™ *ENTRADAS*\n‚Ä¢ Club Sandwich - $8.500\n‚Ä¢ Panini de Pollo - $7.200\n‚Ä¢ Bagel con Queso Crema - $4.500\n\n¬øTe gustar√≠a que calcule el total para 8 personas?`;
    }
    
    // Respuestas espec√≠ficas para bebidas fr√≠as - USAR CONTENIDO REAL DEL MEN√ö
    if (lowerMessage.includes('bebidas fr√≠as') || lowerMessage.includes('bebidas frias') || lowerMessage.includes('frio') || lowerMessage.includes('fr√≠o') || lowerMessage.includes('bebidas frias tienes')) {
      // Extraer informaci√≥n de bebidas fr√≠as del contexto real del men√∫
      const coldDrinksInfo = this.extractColdDrinksInfo(context);
      if (coldDrinksInfo) {
        return coldDrinksInfo;
      }
      // Fallback si no encuentra informaci√≥n espec√≠fica
      return `ü•§ *NUESTRAS BEBIDAS FR√çAS*\n\nTenemos una variedad de bebidas fr√≠as disponibles. ¬øTe gustar√≠a ver nuestro men√∫ completo?`;
    }
    
    // Respuestas espec√≠ficas para postres dulces - USAR CONTENIDO REAL DEL MEN√ö
    if (lowerMessage.includes('postres dulces') || lowerMessage.includes('postres') || lowerMessage.includes('dulce') || lowerMessage.includes('dulces')) {
      // Extraer informaci√≥n de postres del contexto real del men√∫
      const dessertInfo = this.extractDessertInfo(context);
      if (dessertInfo) {
        return dessertInfo;
      }
      // Fallback si no encuentra informaci√≥n espec√≠fica
      return `üç∞ *NUESTROS POSTRES DULCES*\n\nTenemos deliciosos postres disponibles. ¬øTe gustar√≠a ver nuestro men√∫ completo?`;
    }
    
    // Respuestas espec√≠ficas para informaci√≥n de domicilio
    if (lowerMessage.includes('domicilio') || lowerMessage.includes('delivery') || lowerMessage.includes('envio') || lowerMessage.includes('env√≠o') || lowerMessage.includes('costo') || lowerMessage.includes('cuanto')) {
      return `üöö *INFORMACI√ìN DE DOMICILIO*\n\nüí∞ *COSTOS*\n‚Ä¢ Costo de env√≠o: $3.000\n‚Ä¢ Pedido m√≠nimo: $15.000\n‚Ä¢ Radio de entrega: 5 km\n\n‚è∞ *TIEMPOS*\n‚Ä¢ Tiempo estimado: 30-45 minutos\n‚Ä¢ Horario de entrega: 7:00 AM - 8:00 PM\n\nüí° *TIP*: Puedes pedir cantidades espec√≠ficas como "2 cappuccinos" y te calcularemos el total con env√≠o autom√°ticamente.`;
    }
    
    // Usar configuraci√≥n espec√≠fica de horarios
    if (lowerMessage.includes('hora') || lowerMessage.includes('abierto') || lowerMessage.includes('cerrado')) {
      return this.getHoursResponse(businessSettings.businessHours);
    }
    
    // Usar configuraci√≥n espec√≠fica de productos
    if (lowerMessage.includes('men√∫') || lowerMessage.includes('menu') || lowerMessage.includes('productos')) {
      return this.getMenuResponse(businessSettings.productCategories);
    }
    
    // Usar configuraci√≥n espec√≠fica de delivery
    if (lowerMessage.includes('domicilio') || lowerMessage.includes('delivery') || lowerMessage.includes('entrega')) {
      return this.getDeliveryResponse(businessSettings.deliverySettings);
    }
    
    // NUEVO: Usar el contenido del men√∫ PDF si est√° disponible en el contexto
    if (context && (context.includes('MEN√ö') || context.includes('PRODUCTOS') || context.includes('CAF√â') || context.includes('CAFE'))) {
      console.log('üìã Usando contenido del men√∫ PDF para responder');
      
      // Buscar informaci√≥n espec√≠fica en el contexto del men√∫
      if (lowerMessage.includes('caf√©') || lowerMessage.includes('cafe') || lowerMessage.includes('coffee')) {
        // Extraer informaci√≥n sobre caf√© del contexto
        const cafeInfo = this.extractCafeInfo(context);
        if (cafeInfo) {
          return cafeInfo;
        }
      }
      
      if (lowerMessage.includes('precio') || lowerMessage.includes('costo')) {
        // Extraer informaci√≥n de precios del contexto
        const priceInfo = this.extractPriceInfo(context);
        if (priceInfo) {
          return priceInfo;
        }
      }
      
      if (lowerMessage.includes('postre') || lowerMessage.includes('postres') || lowerMessage.includes('dulce')) {
        // Extraer informaci√≥n sobre postres del contexto
        const dessertInfo = this.extractDessertInfo(context);
        if (dessertInfo) {
          return dessertInfo;
        }
      }
      
      if (lowerMessage.includes('entrada') || lowerMessage.includes('entradas') || lowerMessage.includes('aperitivo') || lowerMessage.includes('aperitivos') || lowerMessage.includes('s√°ndwich') || lowerMessage.includes('sandwich') || lowerMessage.includes('s√°ndwiches') || lowerMessage.includes('sandwiches')) {
        // Extraer informaci√≥n sobre entradas del contexto
        const appetizerInfo = this.extractAppetizerInfo(context);
        if (appetizerInfo) {
          return appetizerInfo;
        }
      }
      
      // Detectar pedidos espec√≠ficos con cantidades
      if (this.isOrderRequest(userMessage)) {
        const orderResponse = this.processOrder(userMessage, context, businessSettings);
        if (orderResponse) {
          return orderResponse;
        }
      }
      
      // Si no encuentra informaci√≥n espec√≠fica, usar el contexto general del men√∫
      return this.generateMenuBasedResponse(context, userMessage);
    }
    
    // Fallback a respuestas b√°sicas solo si no hay contexto de men√∫
    console.log('‚ö†Ô∏è Usando respuesta b√°sica como fallback');
    return this.callFreeAI(context, userMessage, businessType);
  }

  // Simulaci√≥n de IA gratuita
  async callFreeAI(context, userMessage, businessType) {
    const lowerMessage = userMessage.toLowerCase();
    
    // Respuestas espec√≠ficas por tipo de negocio
    const responses = {
      restaurant: {
        greeting: '¬°Hola! Bienvenido a nuestro restaurante üçΩÔ∏è\n\n¬øEn qu√© puedo ayudarte hoy?\n‚Ä¢ Ver nuestro men√∫\n‚Ä¢ Hacer un pedido\n‚Ä¢ Consultar precios\n‚Ä¢ Horarios de atenci√≥n',
        menu: 'üçΩÔ∏è *NUESTRO MEN√ö*\n\nTenemos una gran variedad de opciones deliciosas. ¬øTe gustar√≠a que te ayude a elegir algo espec√≠fico?',
        order: '¬°Perfecto! Para hacer tu pedido, por favor ind√≠came:\n\n1. ¬øQu√© te gustar√≠a ordenar?\n2. ¬øPara cu√°ntas personas?\n3. ¬øPrefieres recoger o delivery?\n\nTe ayudo a procesar tu pedido üòä',
        price: 'üí∞ *NUESTROS PRECIOS*\n\nTenemos opciones para todos los presupuestos. ¬øTe gustar√≠a ver el men√∫ completo con precios?',
        hours: 'üïê *HORARIOS DE ATENCI√ìN*\n\nLunes a Domingo: 11:00 AM - 10:00 PM\n\n¬øEn qu√© horario te gustar√≠a hacer tu pedido?'
      },
      cafe: {
        greeting: '¬°Hola! Bienvenido a nuestra cafeter√≠a ‚òï\n\n¬øEn qu√© puedo ayudarte hoy?\n‚Ä¢ Ver nuestro men√∫ de bebidas\n‚Ä¢ Hacer un pedido\n‚Ä¢ Consultar horarios\n‚Ä¢ Reservar mesa',
        menu: '‚òï *NUESTRO MEN√ö*\n\nTenemos caf√©, t√©, bebidas especiales y deliciosa pasteler√≠a. ¬øQu√© te gustar√≠a probar?',
        order: '¬°Excelente! Para tu pedido, dime:\n\n1. ¬øQu√© bebida te gustar√≠a?\n2. ¬øAlg√∫n acompa√±amiento?\n3. ¬øPara llevar o consumo en sitio?\n\nTe preparo todo con mucho gusto üòä',
        price: 'üí∞ *NUESTROS PRECIOS*\n\nBebidas desde $2.99 hasta $6.99\nPasteler√≠a desde $3.99\n\n¬øTe gustar√≠a ver el men√∫ completo?',
        hours: 'üïê *HORARIOS*\n\nLunes a Viernes: 7:00 AM - 8:00 PM\nS√°bados y Domingos: 8:00 AM - 6:00 PM'
      },
      pharmacy: {
        greeting: '¬°Hola! Bienvenido a nuestra farmacia üíä\n\n¬øEn qu√© puedo ayudarte hoy?\n‚Ä¢ Consultar disponibilidad de medicamentos\n‚Ä¢ Informaci√≥n sobre productos\n‚Ä¢ Horarios de atenci√≥n\n‚Ä¢ Servicios farmac√©uticos',
        menu: 'üíä *NUESTROS PRODUCTOS*\n\nContamos con medicamentos, productos de cuidado personal, vitaminas y m√°s. ¬øQu√© est√°s buscando?',
        order: 'Para ayudarte mejor, necesito saber:\n\n1. ¬øQu√© producto necesitas?\n2. ¬øTienes receta m√©dica?\n3. ¬øPrefieres recoger o delivery?\n\nRecuerda que algunos productos requieren receta m√©dica.',
        price: 'üí∞ *INFORMACI√ìN DE PRECIOS*\n\nLos precios var√≠an seg√∫n el producto. ¬øTe gustar√≠a consultar alg√∫n producto espec√≠fico?',
        hours: 'üïê *HORARIOS DE ATENCI√ìN*\n\nLunes a S√°bado: 8:00 AM - 9:00 PM\nDomingos: 9:00 AM - 6:00 PM'
      },
      grocery: {
        greeting: '¬°Hola! Bienvenido a nuestra tienda de v√≠veres üõí\n\n¬øEn qu√© puedo ayudarte hoy?\n‚Ä¢ Ver productos disponibles\n‚Ä¢ Hacer un pedido\n‚Ä¢ Consultar ofertas\n‚Ä¢ Horarios de atenci√≥n',
        menu: 'üõí *NUESTROS PRODUCTOS*\n\nTenemos una amplia variedad de productos frescos, enlatados, l√°cteos y m√°s. ¬øQu√© necesitas?',
        order: '¬°Perfecto! Para tu pedido, dime:\n\n1. ¬øQu√© productos necesitas?\n2. ¬øCantidades aproximadas?\n3. ¬øPara recoger o delivery?\n\nTe ayudo a organizar tu lista de compras üòä',
        price: 'üí∞ *PRECIOS Y OFERTAS*\n\nTenemos ofertas especiales y precios competitivos. ¬øTe gustar√≠a ver nuestras promociones?',
        hours: 'üïê *HORARIOS*\n\nLunes a S√°bado: 7:00 AM - 9:00 PM\nDomingos: 8:00 AM - 7:00 PM'
      }
    };

    const businessResponses = responses[businessType] || responses.restaurant;

    // L√≥gica de respuesta inteligente
    if (lowerMessage.includes('hola') || lowerMessage.includes('buenos d√≠as') || lowerMessage.includes('buenas') || lowerMessage.includes('buen dia') || lowerMessage.includes('holi') || lowerMessage.includes('hey') || lowerMessage.includes('hi')) {
      return `¬°Holi! üòä ¬øC√≥mo est√°s?\n\n¬øEn qu√© puedo ayudarte hoy? Puedes preguntarme sobre:\n‚Ä¢ Nuestro men√∫\n‚Ä¢ Hacer un pedido\n‚Ä¢ Precios\n‚Ä¢ Informaci√≥n de env√≠o\n\n¬°Estoy aqu√≠ para ayudarte! ‚òï`;
    }
    
    if (lowerMessage.includes('refrigerio') || lowerMessage.includes('8 personas') || lowerMessage.includes('grupo')) {
      return `üë• *PERFECTO PARA REFRIGERIOS*\n\nPara un refrigerio de 8 personas te recomiendo:\n\n‚òï *CAF√âS*\n‚Ä¢ Cappuccino - $4.000\n‚Ä¢ Caf√© Latte - $4.200\n‚Ä¢ Caf√© Americano - $3.500\n\nü•§ *BEBIDAS FR√çAS*\n‚Ä¢ Frapp√© de Vainilla - $4.800\n‚Ä¢ Frapp√© de Chocolate - $5.200\n‚Ä¢ Limonada Natural - $3.000\n\nüç∞ *POSTRES DULCES*\n‚Ä¢ Brownie de Chocolate - $3.200\n‚Ä¢ Cheesecake de Fresa - $4.800\n‚Ä¢ Tiramis√∫ - $5.200\n\nü•™ *ENTRADAS*\n‚Ä¢ Club Sandwich - $8.500\n‚Ä¢ Panini de Pollo - $7.200\n‚Ä¢ Bagel con Queso Crema - $4.500\n\n¬øTe gustar√≠a que calcule el total para 8 personas?`;
    }
    
    if (lowerMessage.includes('bebidas fr√≠as') || lowerMessage.includes('bebidas frias') || lowerMessage.includes('frio') || lowerMessage.includes('fr√≠o')) {
      return `ü•§ *NUESTRAS BEBIDAS FR√çAS*\n\n‚Ä¢ Frapp√© de Vainilla - $4.800\n‚Ä¢ Frapp√© de Chocolate - $5.200\n‚Ä¢ Frapp√© de Caramelo - $5.500\n‚Ä¢ Limonada Natural - $3.000\n‚Ä¢ Jugo de Naranja - $3.500\n‚Ä¢ Agua con Gas - $2.500\n‚Ä¢ T√© Helado - $3.200\n\n¬øTe gustar√≠a probar alguna de nuestras bebidas fr√≠as?`;
    }
    
    if (lowerMessage.includes('postres dulces') || lowerMessage.includes('postres') || lowerMessage.includes('dulce') || lowerMessage.includes('dulces')) {
      return `üç∞ *NUESTROS POSTRES DULCES*\n\n‚Ä¢ Brownie de Chocolate - $3.200\n‚Ä¢ Cheesecake de Fresa - $4.800\n‚Ä¢ Tiramis√∫ - $5.200\n‚Ä¢ Muffin de Ar√°ndanos - $2.500\n‚Ä¢ Croissant - $2.800\n‚Ä¢ Torta de Chocolate - $4.500\n‚Ä¢ Flan de Vainilla - $3.500\n\n¬øTe gustar√≠a probar alguno de nuestros postres?`;
    }
    
    if (lowerMessage.includes('domicilio') || lowerMessage.includes('delivery') || lowerMessage.includes('envio') || lowerMessage.includes('env√≠o') || lowerMessage.includes('costo') || lowerMessage.includes('cuanto')) {
      return `üöö *INFORMACI√ìN DE DOMICILIO*\n\nüí∞ *COSTOS*\n‚Ä¢ Costo de env√≠o: $3.000\n‚Ä¢ Pedido m√≠nimo: $15.000\n‚Ä¢ Radio de entrega: 5 km\n\n‚è∞ *TIEMPOS*\n‚Ä¢ Tiempo estimado: 30-45 minutos\n‚Ä¢ Horario de entrega: 7:00 AM - 8:00 PM\n\nüí° *TIP*: Puedes pedir cantidades espec√≠ficas como "2 cappuccinos" y te calcularemos el total con env√≠o autom√°ticamente.`;
    }
    
    if (lowerMessage.includes('men√∫') || lowerMessage.includes('menu') || lowerMessage.includes('productos')) {
      return businessResponses.menu;
    }
    
    if (lowerMessage.includes('pedido') || lowerMessage.includes('ordenar') || lowerMessage.includes('comprar')) {
      return businessResponses.order;
    }
    
    if (lowerMessage.includes('precio') || lowerMessage.includes('oferta')) {
      return businessResponses.price;
    }
    
    if (lowerMessage.includes('hora') || lowerMessage.includes('abierto') || lowerMessage.includes('cerrado')) {
      return businessResponses.hours;
    }

    return `Gracias por contactarnos. ¬øEn qu√© puedo ayudarte? Puedes preguntarme sobre nuestros productos, precios o hacer un pedido.`;
  }

  // M√©todos auxiliares para respuestas contextualizadas
  getDefaultGreeting(businessType) {
    const greetings = {
      restaurant: '¬°Hola! Bienvenido a nuestro restaurante üçΩÔ∏è\n\n¬øEn qu√© puedo ayudarte hoy?',
      cafe: '¬°Hola! Bienvenido a nuestra cafeter√≠a ‚òï\n\n¬øEn qu√© puedo ayudarte hoy?',
      pharmacy: '¬°Hola! Bienvenido a nuestra farmacia üíä\n\n¬øEn qu√© puedo ayudarte hoy?',
      grocery: '¬°Hola! Bienvenido a nuestra tienda üõí\n\n¬øEn qu√© puedo ayudarte hoy?'
    };
    return greetings[businessType] || greetings.restaurant;
  }

  getDefaultOrderResponse(businessType) {
    return '¬°Perfecto! Para hacer tu pedido, por favor ind√≠came qu√© te gustar√≠a ordenar y te ayudo a procesarlo.';
  }

  getDefaultDeliveryResponse(businessType) {
    return 'Ofrecemos servicio a domicilio. ¬øTe gustar√≠a conocer nuestros tiempos de entrega y tarifas?';
  }

  getHoursResponse(businessHours) {
    if (!businessHours) {
      return 'üïê Nuestros horarios de atenci√≥n son de lunes a domingo. ¬øTe gustar√≠a conocer horarios espec√≠ficos?';
    }

    let response = 'üïê *HORARIOS DE ATENCI√ìN*\n\n';
    const days = {
      monday: 'Lunes',
      tuesday: 'Martes', 
      wednesday: 'Mi√©rcoles',
      thursday: 'Jueves',
      friday: 'Viernes',
      saturday: 'S√°bado',
      sunday: 'Domingo'
    };

    // Handle both Map and Object formats
    const hoursData = businessHours instanceof Map ? businessHours : businessHours;
    
    Object.keys(days).forEach(day => {
      const dayData = hoursData.get ? hoursData.get(day) : hoursData[day];
      if (dayData && dayData.isOpen) {
        response += `${days[day]}: ${dayData.open} - ${dayData.close}\n`;
      } else {
        response += `${days[day]}: Cerrado\n`;
      }
    });

    return response;
  }

  getMenuResponse(productCategories) {
    if (!productCategories || productCategories.length === 0) {
      return 'üçΩÔ∏è Tenemos una gran variedad de productos disponibles. ¬øTe gustar√≠a que te ayude a elegir algo espec√≠fico?';
    }

    let response = 'üçΩÔ∏è *NUESTRO MEN√ö*\n\n';
    productCategories.forEach(category => {
      response += `*${category.name}*\n`;
      if (category.description) {
        response += `${category.description}\n`;
      }
      category.items.forEach(item => {
        response += `‚Ä¢ ${item.name}`;
        if (item.price) {
          response += ` - $${item.price}`;
        }
        if (item.description) {
          response += `\n  ${item.description}`;
        }
        response += '\n';
      });
      response += '\n';
    });

    return response;
  }

  getDeliveryResponse(deliverySettings) {
    if (!deliverySettings || !deliverySettings.enabled) {
      return 'Actualmente no ofrecemos servicio a domicilio, pero puedes recoger tu pedido en nuestra sucursal.';
    }

    let response = 'üöö *SERVICIO A DOMICILIO*\n\n';
    response += `‚è∞ Tiempo de entrega: ${deliverySettings.deliveryTime}\n`;
    
    if (deliverySettings.minimumOrder > 0) {
      response += `üí∞ Pedido m√≠nimo: $${deliverySettings.minimumOrder}\n`;
    }
    
    if (deliverySettings.deliveryFee > 0) {
      response += `üöö Costo de env√≠o: $${deliverySettings.deliveryFee}\n`;
    } else {
      response += `üöö Env√≠o gratuito\n`;
    }
    
    if (deliverySettings.deliveryRadius) {
      response += `üìç Radio de entrega: ${deliverySettings.deliveryRadius} km\n`;
    }

    return response;
  }

  // Respuesta de fallback
  getFallbackResponse(userMessage, businessType) {
    return `Gracias por contactarnos. ¬øEn qu√© puedo ayudarte? Puedes preguntarme sobre nuestros productos, precios o hacer un pedido.`;
  }

  // Crear prompt mejorado para Hugging Face
  createEnhancedPrompt(context, userMessage, history) {
    let prompt = context;
    
    if (history.length > 0) {
      prompt += '\n\nHISTORIAL DE CONVERSACI√ìN:\n';
      history.forEach(entry => {
        prompt += `Cliente: ${entry.user}\nAsistente: ${entry.assistant}\n`;
      });
    }
    
    return prompt;
  }

  // Obtener historial de conversaci√≥n
  getConversationHistory(clientId) {
    if (!clientId) return [];
    return this.conversationHistory.get(clientId) || [];
  }

  // Agregar al historial de conversaci√≥n
  addToConversationHistory(clientId, userMessage, assistantResponse) {
    if (!clientId) return;
    
    if (!this.conversationHistory.has(clientId)) {
      this.conversationHistory.set(clientId, []);
    }
    
    const history = this.conversationHistory.get(clientId);
    history.push({
      user: userMessage,
      assistant: assistantResponse,
      timestamp: new Date()
    });
    
    // Mantener solo los √∫ltimos mensajes
    if (history.length > this.maxHistoryLength) {
      history.splice(0, history.length - this.maxHistoryLength);
    }
  }

  // Limpiar historial de conversaci√≥n
  clearConversationHistory(clientId) {
    if (clientId) {
      this.conversationHistory.delete(clientId);
    }
  }

  // Obtener estad√≠sticas
  getStats() {
    return {
      totalConversations: this.conversationHistory.size,
      totalMenuContent: this.menuContent.size,
      totalPrompts: this.aiPrompts.size,
      useHuggingFace: this.useHuggingFace,
      modelName: this.modelName
    };
  }

  // Generar prompt enriquecido con contenido del PDF
  generateEnhancedPrompt(branchId, businessType = 'restaurant') {
    const basePrompt = this.getPrompt(branchId, businessType);
    const menuContent = this.menuContent.get(branchId);
    
    if (!menuContent) {
      return basePrompt;
    }

    let enhancedPrompt = basePrompt + '\n\n';
    
    // Agregar informaci√≥n del negocio
    if (menuContent.businessInfo) {
      const businessInfo = menuContent.businessInfo;
      enhancedPrompt += 'INFORMACI√ìN DEL NEGOCIO:\n';
      
      if (businessInfo.name) {
        enhancedPrompt += `- Nombre: ${businessInfo.name}\n`;
      }
      if (businessInfo.address) {
        enhancedPrompt += `- Direcci√≥n: ${businessInfo.address}\n`;
      }
      if (businessInfo.phone) {
        enhancedPrompt += `- Tel√©fono: ${businessInfo.phone}\n`;
      }
      if (businessInfo.hours) {
        enhancedPrompt += `- Horarios: ${businessInfo.hours}\n`;
      }
      enhancedPrompt += '\n';
    }

    // Agregar informaci√≥n de contacto
    if (menuContent.contactInfo) {
      const contactInfo = menuContent.contactInfo;
      if (contactInfo.phones.length > 0) {
        enhancedPrompt += `CONTACTOS:\n`;
        enhancedPrompt += `- Tel√©fonos: ${contactInfo.phones.join(', ')}\n`;
      }
      if (contactInfo.emails.length > 0) {
        enhancedPrompt += `- Emails: ${contactInfo.emails.join(', ')}\n`;
      }
      if (contactInfo.socialMedia.length > 0) {
        enhancedPrompt += `- Redes Sociales: `;
        contactInfo.socialMedia.forEach(social => {
          enhancedPrompt += `${social.platform}: ${social.handle} `;
        });
        enhancedPrompt += '\n';
      }
      enhancedPrompt += '\n';
    }

    // Agregar secciones del men√∫
    if (menuContent.sections && menuContent.sections.length > 0) {
      enhancedPrompt += 'MEN√ö DISPONIBLE:\n';
      menuContent.sections.forEach(section => {
        enhancedPrompt += `\n${section.name.toUpperCase()}:\n`;
        if (section.products && section.products.length > 0) {
          section.products.forEach(product => {
            enhancedPrompt += `- ${product.name}`;
            if (product.description) {
              enhancedPrompt += `: ${product.description}`;
            }
            if (product.price) {
              enhancedPrompt += ` - $${product.price}`;
            }
            enhancedPrompt += '\n';
          });
        }
      });
      enhancedPrompt += '\n';
    }

    // Agregar productos destacados
    if (menuContent.products && menuContent.products.length > 0) {
      enhancedPrompt += 'PRODUCTOS DESTACADOS:\n';
      const topProducts = menuContent.products.slice(0, 10); // Top 10 productos
      topProducts.forEach(product => {
        enhancedPrompt += `- ${product.name}`;
        if (product.price) {
          enhancedPrompt += ` ($${product.price})`;
        }
        if (product.category && product.category !== 'general') {
          enhancedPrompt += ` [${product.category}]`;
        }
        enhancedPrompt += '\n';
      });
      enhancedPrompt += '\n';
    }

    // Agregar resumen estad√≠stico
    if (menuContent.summary) {
      const summary = menuContent.summary;
      enhancedPrompt += 'RESUMEN DEL MEN√ö:\n';
      enhancedPrompt += `- Total de secciones: ${summary.totalSections}\n`;
      enhancedPrompt += `- Total de productos: ${summary.totalProducts}\n`;
      
      if (summary.priceRange.min !== null) {
        enhancedPrompt += `- Rango de precios: $${summary.priceRange.min} - $${summary.priceRange.max}\n`;
        enhancedPrompt += `- Precio promedio: $${summary.priceRange.average.toFixed(2)}\n`;
      }
      enhancedPrompt += '\n';
    }

    // Instrucciones finales
    enhancedPrompt += `INSTRUCCIONES IMPORTANTES:
- Usa esta informaci√≥n para responder preguntas sobre productos, precios y disponibilidad
- Si no encuentras un producto espec√≠fico, sugiere alternativas similares
- Siempre menciona los precios cuando sea relevante
- Si el cliente pregunta por informaci√≥n de contacto, usa los datos proporcionados
- Mant√©n un tono amigable y profesional
- Si no est√°s seguro de algo, es mejor decir que no tienes esa informaci√≥n espec√≠fica`;

    return enhancedPrompt;
  }

  // Obtener respuesta de IA con contexto enriquecido
  async getAIResponse(branchId, userMessage, businessType = 'restaurant') {
    try {
      const enhancedPrompt = this.generateEnhancedPrompt(branchId, businessType);
      const conversationHistory = this.conversationHistory.get(branchId) || [];
      
      // Construir contexto completo
      let fullContext = enhancedPrompt + '\n\nCONVERSACI√ìN:\n';
      
      // Agregar historial de conversaci√≥n (√∫ltimos 5 mensajes)
      const recentHistory = conversationHistory.slice(-5);
      recentHistory.forEach(msg => {
        fullContext += `${msg.role}: ${msg.content}\n`;
      });
      
      fullContext += `Usuario: ${userMessage}\nAsistente:`;

      // Simular respuesta de IA (aqu√≠ integrar√≠as con el modelo real)
      const response = await this.generateSimulatedResponse(userMessage, enhancedPrompt);
      
      // Guardar en historial
      conversationHistory.push(
        { role: 'Usuario', content: userMessage, timestamp: new Date() },
        { role: 'Asistente', content: response, timestamp: new Date() }
      );
      
      // Mantener solo los √∫ltimos mensajes
      if (conversationHistory.length > this.maxHistoryLength) {
        conversationHistory.splice(0, conversationHistory.length - this.maxHistoryLength);
      }
      
      this.conversationHistory.set(branchId, conversationHistory);
      
      return {
        success: true,
        response: response,
        context: {
          hasMenuContent: !!this.menuContent.get(branchId),
          promptLength: enhancedPrompt.length,
          conversationLength: conversationHistory.length
        }
      };
      
    } catch (error) {
      this.logger.error(`Error generando respuesta de IA para sucursal ${branchId}:`, error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // Generar respuesta simulada mejorada
  async generateSimulatedResponse(userMessage, enhancedPrompt) {
    const message = userMessage.toLowerCase();
    
    // Respuestas basadas en contenido del PDF
    if (message.includes('men√∫') || message.includes('menu')) {
      return 'Te puedo ayudar con informaci√≥n sobre nuestro men√∫. ¬øHay alguna categor√≠a espec√≠fica que te interese? Por ejemplo: bebidas, platos principales, postres, etc.';
    }
    
    if (message.includes('precio') || message.includes('cuesta') || message.includes('vale')) {
      return 'Los precios var√≠an seg√∫n el producto. ¬øHay alg√∫n plato espec√≠fico del que te gustar√≠a saber el precio? Puedo ayudarte a encontrar la informaci√≥n que necesitas.';
    }
    
    if (message.includes('direcci√≥n') || message.includes('ubicaci√≥n') || message.includes('donde')) {
      return 'Te puedo proporcionar nuestra direcci√≥n y datos de contacto. ¬øTe gustar√≠a que te comparta esta informaci√≥n?';
    }
    
    if (message.includes('horario') || message.includes('hora') || message.includes('abierto')) {
      return 'Te puedo informar sobre nuestros horarios de atenci√≥n. ¬øNecesitas saber los horarios para alg√∫n d√≠a espec√≠fico?';
    }
    
    if (message.includes('pedido') || message.includes('orden') || message.includes('comprar')) {
      return '¬°Perfecto! Te puedo ayudar con tu pedido. ¬øQu√© te gustar√≠a ordenar? Puedo sugerirte algunos de nuestros platos m√°s populares.';
    }
    
    if (message.includes('recomendaci√≥n') || message.includes('recomienda') || message.includes('sugerir')) {
      return '¬°Me encanta ayudar con recomendaciones! Bas√°ndome en nuestro men√∫, puedo sugerirte algunos platos excelentes. ¬øTienes alguna preferencia de sabor o tipo de comida?';
    }
    
    // Respuesta por defecto m√°s inteligente
    return 'Hola! Soy tu asistente virtual y estoy aqu√≠ para ayudarte con cualquier consulta sobre nuestro men√∫, precios, pedidos o informaci√≥n general. ¬øEn qu√© puedo asistirte hoy?';
  }

  // Extraer informaci√≥n sobre caf√© del contexto del men√∫
  extractCafeInfo(context) {
    try {
      const lines = context.split('\n');
      const cafeLines = lines.filter(line => 
        line.toLowerCase().includes('caf√©') || 
        line.toLowerCase().includes('cafe') || 
        line.toLowerCase().includes('coffee') ||
        line.toLowerCase().includes('espresso') ||
        line.toLowerCase().includes('americano') ||
        line.toLowerCase().includes('latte') ||
        line.toLowerCase().includes('cappuccino')
      );
      
      if (cafeLines.length > 0) {
        // Filtrar solo las l√≠neas que contienen productos con precios
        const cafeProducts = cafeLines.filter(line => 
          line.includes('‚Ä¢') || line.includes('-') || line.includes('$')
        );
        
        if (cafeProducts.length > 0) {
          return `‚òï *NUESTROS CAF√âS*\n\n${cafeProducts.slice(0, 6).join('\n')}\n\n¬øTe gustar√≠a probar alguno de nuestros caf√©s especiales?`;
        }
      }
      
      return null;
    } catch (error) {
      console.error('Error extrayendo informaci√≥n de caf√©:', error);
      return null;
    }
  }

  // Extraer informaci√≥n de precios del contexto del men√∫
  extractPriceInfo(context) {
    try {
      const lines = context.split('\n');
      const priceLines = lines.filter(line => 
        line.includes('$') || 
        line.includes('pesos') || 
        line.includes('precio') ||
        line.match(/\d+\.\d+/) ||
        line.match(/\$\d+/)
      );
      
      if (priceLines.length > 0) {
        const priceInfo = priceLines.slice(0, 10).join('\n'); // Limitar a 10 l√≠neas
        return `üí∞ *NUESTROS PRECIOS*\n\n${priceInfo}\n\n¬øTe gustar√≠a ver m√°s informaci√≥n sobre alg√∫n producto espec√≠fico?`;
      }
      
      return null;
    } catch (error) {
      console.error('Error extrayendo informaci√≥n de precios:', error);
      return null;
    }
  }

  // Extraer informaci√≥n de bebidas fr√≠as del contexto real del men√∫
  extractColdDrinksInfo(context) {
    try {
      const lines = context.split('\n');
      const coldDrinksLines = lines.filter(line =>
        line.toLowerCase().includes('bebidas fr√≠as') ||
        line.toLowerCase().includes('frapp√©') ||
        line.toLowerCase().includes('limonada') ||
        line.toLowerCase().includes('jugo') ||
        line.toLowerCase().includes('agua con gas') ||
        line.toLowerCase().includes('t√© helado')
      );
      
      if (coldDrinksLines.length > 0) {
        // Buscar las l√≠neas que contienen productos con precios
        const coldDrinksProducts = lines.filter(line =>
          (line.includes('‚Ä¢') || line.includes('-')) &&
          (line.toLowerCase().includes('frapp√©') ||
           line.toLowerCase().includes('limonada') ||
           line.toLowerCase().includes('jugo') ||
           line.toLowerCase().includes('agua') ||
           line.toLowerCase().includes('t√© helado') ||
           line.toLowerCase().includes('fr√≠o'))
        );
        
        if (coldDrinksProducts.length > 0) {
          return `ü•§ *NUESTRAS BEBIDAS FR√çAS*\n\n${coldDrinksProducts.join('\n')}\n\n¬øTe gustar√≠a probar alguna de nuestras bebidas fr√≠as?`;
        }
      }
      return null;
    } catch (error) {
      console.error('Error extrayendo informaci√≥n de bebidas fr√≠as:', error);
      return null;
    }
  }

  // Extraer informaci√≥n sobre postres del contexto del men√∫
  extractDessertInfo(context) {
    try {
      const lines = context.split('\n');
      const dessertLines = lines.filter(line => 
        line.toLowerCase().includes('postre') || 
        line.toLowerCase().includes('brownie') ||
        line.toLowerCase().includes('cheesecake') ||
        line.toLowerCase().includes('tiramis√∫') ||
        line.toLowerCase().includes('muffin') ||
        line.toLowerCase().includes('dulce') ||
        line.toLowerCase().includes('torta') ||
        line.toLowerCase().includes('pastel')
      );
      
      if (dessertLines.length > 0) {
        // Filtrar solo las l√≠neas que contienen productos con precios
        const dessertProducts = dessertLines.filter(line => 
          line.includes('‚Ä¢') || line.includes('-') || line.includes('$')
        );
        
        if (dessertProducts.length > 0) {
          return `üç∞ *NUESTROS POSTRES*\n\n${dessertProducts.slice(0, 6).join('\n')}\n\n¬øTe gustar√≠a probar alguno de nuestros postres?`;
        }
      }
      
      return null;
    } catch (error) {
      console.error('Error extrayendo informaci√≥n de postres:', error);
      return null;
    }
  }

  // Extraer informaci√≥n sobre entradas del contexto del men√∫
  extractAppetizerInfo(context) {
    try {
      const lines = context.split('\n');
      const appetizerLines = lines.filter(line => 
        line.toLowerCase().includes('entrada') || 
        line.toLowerCase().includes('aperitivo') ||
        line.toLowerCase().includes('s√°ndwich') ||
        line.toLowerCase().includes('sandwich') ||
        line.toLowerCase().includes('panini') ||
        line.toLowerCase().includes('bagel') ||
        line.toLowerCase().includes('tostada') ||
        line.toLowerCase().includes('bruschetta') ||
        line.toLowerCase().includes('nachos') ||
        line.toLowerCase().includes('empanada')
      );
      
      if (appetizerLines.length > 0) {
        // Filtrar solo las l√≠neas que contienen productos con precios
        const appetizerProducts = appetizerLines.filter(line => 
          line.includes('‚Ä¢') || line.includes('-') || line.includes('$')
        );
        
        if (appetizerProducts.length > 0) {
          return `ü•™ *NUESTRAS ENTRADAS*\n\n${appetizerProducts.slice(0, 6).join('\n')}\n\n¬øTe gustar√≠a probar alguna de nuestras entradas?`;
        }
      }
      
      // Si no encuentra entradas espec√≠ficas, buscar en s√°ndwiches
      const sandwichLines = lines.filter(line => 
        line.toLowerCase().includes('s√°ndwich') ||
        line.toLowerCase().includes('sandwich') ||
        line.toLowerCase().includes('panini') ||
        line.toLowerCase().includes('bagel')
      );
      
      if (sandwichLines.length > 0) {
        const sandwichProducts = sandwichLines.filter(line => 
          line.includes('‚Ä¢') || line.includes('-') || line.includes('$')
        );
        
        if (sandwichProducts.length > 0) {
          return `ü•™ *NUESTRAS ENTRADAS*\n\n${sandwichProducts.slice(0, 6).join('\n')}\n\n¬øTe gustar√≠a probar alguna de nuestras entradas?`;
        }
      }
      
      return null;
    } catch (error) {
      console.error('Error extrayendo informaci√≥n de entradas:', error);
      return null;
    }
  }

  // Detectar si el mensaje es una solicitud de pedido
  isOrderRequest(userMessage) {
    const lowerMessage = userMessage.toLowerCase();
    
    // Patrones que indican un pedido
    const orderPatterns = [
      /\d+\s+(caf√©|cafe|cappuccino|latte|americano|mocha|espresso)/i,
      /\d+\s+(panini|sandwich|s√°ndwich|bagel|club)/i,
      /\d+\s+(brownie|cheesecake|tiramis√∫|muffin|torta|postre)/i,
      /\d+\s+(frapp√©|limonada|jugo)/i,
      /\d+\s+(club\s+sandwich|panini\s+de\s+pollo)/i,
      /me\s+gustan\s+los?\s+club\s+sandwich\s+me\s+regalas?\s+\d+/i,
      /me\s+gustan\s+los?\s+\w+\s+me\s+regalas?\s+\d+.*porfa/i,
      /.*me\s+gustan\s+los?\s+club\s+sandwich.*me\s+regalas?\s+\d+/i,
      /.*me\s+gustan\s+los?\s+\w+.*me\s+regalas?\s+\d+/i,
      // Patr√≥n espec√≠fico para el mensaje del usuario
      /axcelente\s+me\s+gustan\s+los\s+club\s+sandwich\s+me\s+ragalas\s+\d+/i,
      /quiero\s+\d+/i,
      /me\s+gustar√≠a\s+\d+/i,
      /me\s+gusta\s+el?\s+\w+\s+me\s+d√°s?\s+\d+/i,
      /me\s+gustan\s+los?\s+\w+\s+me\s+regalas?\s+\d+/i,
      /regalame\s+\d+/i,
      /reg√°lame\s+\d+/i,
      /pedir\s+\d+/i,
      /ordenar\s+\d+/i,
      /cuanto\s+(seria|cuesta|vale)/i,
      /costo\s+de\s+envio/i,
      /precio\s+total/i,
      /total\s+con\s+domicilio/i,
      /domicilio\s+para\s+pago/i,
      /valor\s+total/i,
      /pago\s+por\s+transferencia/i
    ];
    
    return orderPatterns.some(pattern => pattern.test(userMessage));
  }

  // Procesar pedido espec√≠fico con c√°lculos
  processOrder(userMessage, context, businessSettings) {
    try {
      console.log('üõí ===== PROCESANDO PEDIDO =====');
      console.log('üí¨ Mensaje:', userMessage);
      
      // Extraer productos y cantidades del mensaje
      const orderItems = this.extractOrderItems(userMessage, context);
      
      if (orderItems.length === 0) {
        return null;
      }
      
      // Calcular totales
      const subtotal = orderItems.reduce((total, item) => total + (item.price * item.quantity), 0);
      const deliveryFee = businessSettings.deliverySettings?.deliveryFee || 3000;
      const total = subtotal + deliveryFee;
      
      // Generar respuesta del pedido
      let response = `üõí *RESUMEN DE TU PEDIDO*\n\n`;
      
      orderItems.forEach(item => {
        response += `‚Ä¢ ${item.quantity}x ${item.name} - $${item.price.toLocaleString()} c/u\n`;
      });
      
      response += `\nüí∞ *TOTALES*\n`;
      response += `Subtotal: $${subtotal.toLocaleString()}\n`;
      response += `Costo de env√≠o: $${deliveryFee.toLocaleString()}\n`;
      response += `*Total: $${total.toLocaleString()}*\n\n`;
      
      response += `¬øConfirmas tu pedido? Te enviaremos los detalles de pago y entrega.`;
      
      console.log('‚úÖ Pedido procesado exitosamente');
      return response;
      
    } catch (error) {
      console.error('Error procesando pedido:', error);
      return null;
    }
  }

  // Extraer productos y cantidades del mensaje
  extractOrderItems(userMessage, context) {
    const items = [];
    const lines = context.split('\n');
    
    // Crear mapa de productos con precios - MEJORADO
    const productMap = new Map();
    lines.forEach(line => {
      // Mejorar la expresi√≥n regular para capturar precios con puntos
      const match = line.match(/‚Ä¢\s*(.+?)\s*-\s*\$\s*([\d.,]+)/);
      if (match) {
        const name = match[1].trim().toLowerCase();
        // Convertir precio correctamente (remover comas y puntos)
        const priceStr = match[2].replace(/[,.]/g, '');
        const price = parseInt(priceStr);
        productMap.set(name, price);
        console.log(`üì¶ Producto mapeado: ${name} - $${price}`);
      }
    });
    
    // Buscar cantidades y productos en el mensaje
    const lowerMessage = userMessage.toLowerCase();
    
    // Patr√≥n mejorado para encontrar productos con cantidades
    const quantityPattern = /(\d+)\s+([^,\n]+?)(?:\s+con\s+[^,\n]+)?/g;
    let match;
    
    while ((match = quantityPattern.exec(lowerMessage)) !== null) {
      const quantity = parseInt(match[1]);
      const productText = match[2].trim();
      
      console.log(`üîç Buscando producto: "${productText}" (cantidad: ${quantity})`);
      
      // Buscar el producto en el mapa con mejor l√≥gica
      let found = false;
      for (const [productName, price] of productMap) {
        // Buscar coincidencias m√°s precisas
        if (productText.includes(productName) || 
            productName.includes(productText.split(' ')[0]) ||
            productName.includes(productText.split(' ')[1]) ||
            productName.includes(productText.split(' ')[2]) ||
            // Casos especiales para productos compuestos
            (productText.includes('torta') && productName.includes('torta')) ||
            (productText.includes('cafe') && productName.includes('caf√©')) ||
            (productText.includes('espresso') && productName.includes('espresso'))) {
          
          console.log(`‚úÖ Producto encontrado: ${productName} - $${price}`);
          items.push({
            name: productName,
            quantity: quantity,
            price: price
          });
          found = true;
          break;
        }
      }
      
      if (!found) {
        console.log(`‚ùå Producto no encontrado: "${productText}"`);
        // Mostrar productos disponibles para debug
        console.log(`üìã Productos disponibles:`, Array.from(productMap.keys()));
      }
    }
    
    return items;
  }

  // Generar respuesta basada en el contenido del men√∫
  generateMenuBasedResponse(context, userMessage) {
    try {
      const lowerMessage = userMessage.toLowerCase();
      
      // Si pregunta por productos espec√≠ficos, buscar en el men√∫
      if (lowerMessage.includes('caf√©') || lowerMessage.includes('cafe')) {
        return this.extractCafeInfo(context) || '‚òï Tenemos una gran variedad de caf√©s especiales. ¬øTe gustar√≠a conocer nuestras opciones?';
      }
      
      // Responder espec√≠ficamente a acompa√±antes/pan
      if (lowerMessage.includes('acompa√±ante') || lowerMessage.includes('acompa√±antes') || lowerMessage.includes('pan')) {
        const lines = context.split('\n');
        const accompaniments = lines.filter(line => 
          line.toLowerCase().includes('pan') || 
          line.toLowerCase().includes('postre') ||
          line.toLowerCase().includes('brownie') ||
          line.toLowerCase().includes('cheesecake') ||
          line.toLowerCase().includes('tiramis√∫') ||
          line.toLowerCase().includes('muffin') ||
          line.toLowerCase().includes('s√°ndwich') ||
          line.toLowerCase().includes('panini') ||
          line.toLowerCase().includes('bagel')
        );
        
        if (accompaniments.length > 0) {
          return `ü•ñ *NUESTROS ACOMPA√ëANTES*\n\n${accompaniments.slice(0, 8).join('\n')}\n\n¬øTe gustar√≠a probar alguno de nuestros acompa√±antes?`;
        }
        
        return 'ü•ñ Tenemos deliciosos acompa√±antes como pan, postres y s√°ndwiches. ¬øTe gustar√≠a conocer nuestras opciones?';
      }
      
      if (lowerMessage.includes('comida') || lowerMessage.includes('plato') || lowerMessage.includes('almuerzo')) {
        const foodLines = context.split('\n').filter(line => 
          line.toLowerCase().includes('plato') || 
          line.toLowerCase().includes('comida') ||
          line.toLowerCase().includes('almuerzo') ||
          line.toLowerCase().includes('cena')
        );
        
        if (foodLines.length > 0) {
          return `üçΩÔ∏è *NUESTROS PLATOS*\n\n${foodLines.slice(0, 5).join('\n')}\n\n¬øTe gustar√≠a probar alguno de nuestros platos especiales?`;
        }
      }
      
      // Respuesta m√°s conversacional y √∫til
      const lines = context.split('\n');
      const menuItems = lines.filter(line => 
        line.includes('‚òï') || 
        line.includes('üç∞') || 
        line.includes('ü•™') || 
        line.includes('ü•§') ||
        line.includes('‚Ä¢')
      ).slice(0, 8); // Mostrar m√°s elementos
      
      if (menuItems.length > 0) {
        return `üçΩÔ∏è *NUESTRO MEN√ö*\n\n${menuItems.join('\n')}\n\nüí° *TIP*: Puedes pedir cantidades espec√≠ficas como "2 cappuccinos" o "3 paninis" y te calcularemos el total con env√≠o.`;
      }
      
      return 'üçΩÔ∏è Tenemos una gran variedad de productos disponibles. ¬øTe gustar√≠a que te ayude a elegir algo espec√≠fico?';
      
    } catch (error) {
      console.error('Error generando respuesta basada en men√∫:', error);
      return 'üçΩÔ∏è Tenemos una gran variedad de productos disponibles. ¬øTe gustar√≠a que te ayude a elegir algo espec√≠fico?';
    }
  }
}

module.exports = AIService;
