const { HfInference } = require('@huggingface/inference');
const fetch = require('node-fetch');
const LoggerService = require('./LoggerService');

class AIService {
  constructor() {
    this.hf = null;
    this.modelName = 'microsoft/DialoGPT-small'; // Cambiado a modelo compatible
    this.useHuggingFace = false;
    this.menuContent = new Map();
    this.aiPrompts = new Map();
    this.conversationHistory = new Map();
    this.maxHistoryLength = 10;
    this.logger = new LoggerService();
    
    // Auto-configurar desde variables de entorno
    this.autoConfigure();
  }

  // Auto-configurar desde variables de entorno
  autoConfigure() {
    const apiKey = process.env.HUGGINGFACE_API_KEY;
    const modelName = process.env.HUGGINGFACE_MODEL;
    const useHF = process.env.USE_HUGGINGFACE === 'true';
    
    if (apiKey && useHF) {
      this.configureHuggingFace(apiKey, modelName);
      this.logger.info('ü§ñ IA configurada autom√°ticamente desde variables de entorno');
    } else {
      this.logger.info('‚ö†Ô∏è IA usando modo simulaci√≥n - configura API key para usar IA real');
    }
  }

  // Configurar Hugging Face
  configureHuggingFace(apiKey, modelName = null) {
    if (apiKey) {
      this.hf = new HfInference(apiKey);
      this.useHuggingFace = true;
      if (modelName) {
        this.modelName = modelName;
      }
      this.logger.info('‚úÖ Hugging Face configurado');
    } else {
      this.hf = null;
      this.useHuggingFace = false;
      this.logger.info('‚ö†Ô∏è Hugging Face deshabilitado');
    }
  }

  // Configurar contenido del men√∫ para una sucursal
  setMenuContent(branchId, content) {
    this.menuContent.set(branchId, content);
    this.logger.ai(branchId, 'üìã Men√∫ configurado');
  }

  // Limpiar contenido del men√∫ para una sucursal
  clearMenuContent(branchId) {
    this.menuContent.delete(branchId);
    this.logger.ai(branchId, 'üóëÔ∏è Men√∫ eliminado');
  }

  // Configurar prompt personalizado para una sucursal
  setAIPrompt(branchId, prompt) {
    this.aiPrompts.set(branchId, prompt);
    this.logger.ai(branchId, 'ü§ñ Prompt de IA configurado');
  }

  // Obtener prompt personalizado o usar uno por defecto
  getPrompt(branchId, businessType = 'restaurant') {
    const customPrompt = this.aiPrompts.get(branchId);
    if (customPrompt) {
      return customPrompt;
    }

    // Prompts por defecto seg√∫n tipo de negocio (optimizados para espa√±ol)
    const defaultPrompts = {
      restaurant: `Eres un asistente virtual amigable de un restaurante colombiano. 
      Tu objetivo es ayudar a los clientes con sus consultas sobre el men√∫, precios, pedidos y cualquier otra pregunta relacionada con nuestros servicios.
      
      Debes ser:
      - Amigable y profesional, usando expresiones naturales en espa√±ol
      - √ötil y preciso en tus respuestas
      - Capaz de sugerir productos del men√∫
      - Ayudar con el proceso de pedidos
      - Responder preguntas sobre precios y disponibilidad
      - Usar un tono c√°lido y colombiano
      
      Responde de manera natural y conversacional en espa√±ol colombiano, como si fueras un empleado amigable del restaurante.`,
      
      cafe: `Eres un asistente virtual amigable de una cafeter√≠a colombiana. 
      Ayuda a los clientes con consultas sobre bebidas, pasteler√≠a, horarios y pedidos.
      
      Debes ser:
      - Conocedor de caf√© y bebidas colombianas
      - Sugerir combinaciones de bebidas y postres
      - Informar sobre horarios de atenci√≥n
      - Ayudar con pedidos para llevar o consumo en sitio
      - Usar expresiones c√°lidas y colombianas
      
      Responde en espa√±ol colombiano natural y amigable.`,
      
      pharmacy: `Eres un asistente virtual de una farmacia colombiana. 
      Ayuda a los clientes con consultas sobre medicamentos, productos de cuidado personal y servicios farmac√©uticos.
      
      Debes ser:
      - Profesional y discreto
      - Informar sobre disponibilidad de productos
      - Recordar que no puedes dar diagn√≥sticos m√©dicos
      - Sugerir consultar con un profesional de la salud cuando sea necesario
      - Usar un lenguaje profesional pero amigable en espa√±ol
      
      Responde en espa√±ol colombiano profesional y √∫til.`,
      
      grocery: `Eres un asistente virtual de una tienda de v√≠veres colombiana. 
      Ayuda a los clientes con consultas sobre productos, precios, disponibilidad y pedidos.
      
      Debes ser:
      - Conocedor de productos de consumo colombianos
      - Informar sobre ofertas y promociones
      - Ayudar con listas de compras
      - Sugerir productos complementarios
      - Usar expresiones amigables y colombianas
      
      Responde en espa√±ol colombiano natural y √∫til.`
    };

    return defaultPrompts[businessType] || defaultPrompts.restaurant;
  }

  // Generar respuesta usando IA con configuraci√≥n espec√≠fica de sucursal
  async generateResponse(branchId, userMessage, clientId = null, businessType = 'restaurant', branchConfig = null) {
    try {
      // Cargar configuraci√≥n espec√≠fica de la sucursal autom√°ticamente
      if (branchId && !this.menuContent.has(branchId)) {
        console.log('üîÑ Cargando configuraci√≥n autom√°ticamente para sucursal:', branchId);
        await this.loadBranchConfig(branchId);
      }

      // Generando respuesta IA contextualizada

      // Analizar intenci√≥n del usuario
      const intent = this.analyzeUserIntent(userMessage);
      console.log('üéØ Intenci√≥n detectada:', intent);

      // Guardar mensaje en historial de conversaci√≥n
      if (clientId) {
        await this.saveConversationMessage(clientId, branchId, userMessage, intent);
      }

      // Si es saludo, responder incluyendo el nombre de la sucursal
      if (intent === 'saludo' || intent === 'greeting') {
        try {
          const Branch = require('../models/Branch');
          let branchName = 'nuestra sucursal';
          try {
            const branchDoc = await Branch.findById(branchId) || await Branch.findOne({ branchId });
            if (branchDoc && branchDoc.name) branchName = branchDoc.name;
          } catch (_) {}
          return `¬°Hola! üòä Somos ${branchName}. ¬øC√≥mo andas? ¬øEn qu√© te puedo ayudar?

Si deseas, puedo enviarte el men√∫ para que lo revises. Solo dime "men√∫" o "env√≠ame el men√∫".`;
        } catch (_) {
          return `¬°Hola! üòä ¬øC√≥mo andas? ¬øEn qu√© te puedo ayudar?

Si deseas, puedo enviarte el men√∫ para que lo revises. Solo dime "men√∫" o "env√≠ame el men√∫".`;
        }
      }

      // Si estamos esperando que el cliente elija domicilio o recoger
      if (clientId && this._awaitingDeliveryChoice && this._awaitingDeliveryChoice.has(`${clientId}::${branchId}`)) {
        const pendingOrder = await this.getLastPendingOrder(clientId, branchId);
        if (pendingOrder) {
          const choiceHandled = await this.handleDeliveryChoice(clientId, branchId, userMessage, pendingOrder);
          if (choiceHandled) {
            return choiceHandled;
          }
        }
      }

      // Si estamos esperando datos de env√≠o para un pedido de domicilio y el usuario env√≠a datos, procesarlos
      if (clientId) {
        const pendingOrder = await this.getLastPendingOrder(clientId, branchId);
        if (pendingOrder && pendingOrder.delivery && pendingOrder.delivery.type === 'delivery' && !pendingOrder.delivery.address) {
          const handled = await this.tryHandleDeliveryData(clientId, branchId, userMessage, pendingOrder);
          if (handled) return handled;
        }
      }

      // Si hay un pedido pendiente que necesita clarificaci√≥n, procesar la respuesta
      if (clientId) {
        const pendingOrder = await this.getLastPendingOrder(clientId, branchId);
        if (pendingOrder && pendingOrder.needsClarification) {
          const clarificationHandled = await this.handleClarificationResponse(clientId, branchId, userMessage, pendingOrder);
          if (clarificationHandled) {
            return clarificationHandled;
          }
        }
      }

      // Si es un pedido, procesar autom√°ticamente
      if (intent === 'hacer_pedido') {
        // Si hay una recomendaci√≥n activa y el usuario dice "pedir", procesar la recomendaci√≥n
        if (clientId && userMessage.toLowerCase().includes('pedir')) {
          const profile = this.getRecommendationProfile(clientId, branchId);
          if (profile.questionsAnswered === 5) {
            console.log('ü§ñ Procesando pedido desde recomendaci√≥n');
            return await this.processRecommendationOrder(clientId, branchId, profile);
          }
        }
        
        // Obtener el customPrompt de la configuraci√≥n cargada
        const customPrompt = this.aiPrompts.get(branchId) || null;
        const orderAnalysis = this.processOrder(userMessage, branchId, customPrompt);
        if (orderAnalysis.hasProducts) {
          console.log('üõí Procesando pedido autom√°ticamente');
          const orderResponse = this.generateOrderResponse(orderAnalysis);
          
          // Guardar pedido pendiente para confirmaci√≥n
          if (clientId) {
            await this.savePendingOrder(clientId, branchId, orderAnalysis);
            await this.saveOrderToHistory(clientId, branchId, orderAnalysis);
          }
          
          this.logger.ai(branchId, 'üõí Pedido procesado autom√°ticamente');
          return orderResponse;
        }
      }

      // Si es una respuesta a recomendaci√≥n (n√∫mero 1-4), procesar
      if (/^[1-4]$/.test(userMessage.trim()) && clientId) {
        const profile = this.getRecommendationProfile(clientId, branchId);
        if (profile.questionsAnswered < 5) {
          console.log('ü§ñ Procesando respuesta de recomendaci√≥n');
          return this.processRecommendationAnswer(clientId, branchId, userMessage);
        }
      }

      // Si es confirmaci√≥n de pedido, procesar
      if (this.isOrderConfirmation(userMessage) && clientId) {
        console.log('‚úÖ Confirmaci√≥n de pedido detectada');
        return await this.handleOrderConfirmation(clientId, branchId, userMessage);
      }

      // Si el usuario menciona que quiere dar datos de env√≠o y hay pedido pendiente de domicilio,
      // re-env√≠a el formato de solicitud de datos de entrega para guiarlo correctamente
      if (clientId && this.isDeliveryDataRequest && this.isDeliveryDataRequest(userMessage)) {
        const pendingOrder = await this.getLastPendingOrder(clientId, branchId);
        if (pendingOrder && pendingOrder.delivery && pendingOrder.delivery.type === 'delivery') {
          console.log('üì¶ Usuario menciona datos de env√≠o; enviando formato');
          return await this.requestDeliveryData(clientId, branchId, pendingOrder);
        }
      }

      // Si es modificaci√≥n de pedido, usar contexto previo
      if (intent === 'modificar_pedido' && clientId) {
        const previousOrder = await this.getLastOrder(clientId, branchId);
        if (previousOrder) {
          console.log('üîÑ Modificando pedido anterior');
          const modifiedResponse = this.handleOrderModification(userMessage, previousOrder);
          this.logger.ai(branchId, 'üîÑ Pedido modificado usando contexto');
          return modifiedResponse;
        }
      }

      // Obtener configuraci√≥n espec√≠fica de la sucursal
      const menuContent = this.menuContent.get(branchId);
      const customPrompt = this.aiPrompts.get(branchId);
      const businessSettings = branchConfig || {};

      console.log('üîç ===== CONFIGURACI√ìN DE IA CARGADA =====');
      console.log('üè™ Branch ID:', branchId);
      console.log('üìã Menu Content:', menuContent ? 'Disponible' : 'No disponible');
      console.log('ü§ñ Custom Prompt:', customPrompt ? 'Disponible' : 'No disponible');
      console.log('üìè Menu Length:', menuContent ? menuContent.length : 0, 'caracteres');
      console.log('==========================================');

      // Construir contexto completo con historial
      const fullContext = this.buildMenuContext(menuContent, userMessage);
      const conversationHistory = clientId ? await this.getConversationHistory(clientId, branchId) : [];
      
      // Intentar usar Hugging Face primero
      if (this.useHuggingFace && this.hf) {
        try {
          const response = await this.callHuggingFace(fullContext, userMessage, clientId);
          this.logger.ai(branchId, 'ü§ñ Respuesta Hugging Face generada');
          return response;
        } catch (hfError) {
          this.logger.warn(`Error con Hugging Face, usando simulaci√≥n: ${hfError.message}`);
          const response = await this.callContextualizedAI(fullContext, userMessage, businessType, businessSettings, customPrompt, clientId, branchId);
          this.logger.ai(branchId, 'ü§ñ Respuesta simulaci√≥n contextualizada generada');
          return response;
        }
      } else {
        // Usar simulaci√≥n inteligente contextualizada
        const response = await this.callContextualizedAI(fullContext, userMessage, businessType, businessSettings, customPrompt, clientId, branchId);
        this.logger.ai(branchId, 'ü§ñ Respuesta simulaci√≥n contextualizada generada');
        return response;
      }
      
    } catch (error) {
      this.logger.error(`Error generando respuesta IA para ${branchId}:`, error);
      return this.getFallbackResponse(userMessage, businessType);
    }
  }

  // Construir contexto del men√∫
  buildMenuContext(menuContent, userMessage) {
    let context = '';
    
    if (menuContent) {
      context += `Informaci√≥n del men√∫: ${menuContent}\n\n`;
    }
    
    context += `Mensaje del usuario: ${userMessage}\n\n`;
    context += `Responde de manera amigable y √∫til en espa√±ol colombiano.`;
    
    return context;
  }

  // Llamar a Hugging Face usando API REST directa
  async callHuggingFace(context, userMessage, clientId) {
    try {
      // Obtener historial de conversaci√≥n
      const history = this.getConversationHistory(clientId);
      
      // Crear prompt mejorado
      const enhancedPrompt = this.createEnhancedPrompt(context, userMessage, history);
      
      this.logger.info(`ü§ñ Llamando a Hugging Face con API REST`);
      
      // Usar API REST directa en lugar del SDK
      const apiKey = process.env.HUGGINGFACE_API_KEY;
      const model = process.env.HUGGINGFACE_MODEL || 'gpt2';
      
      if (!apiKey) {
        throw new Error('API Key de Hugging Face no configurada');
      }
      
      const response = await fetch('https://api-inference.huggingface.co/models/' + model, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          inputs: enhancedPrompt,
          parameters: {
            max_new_tokens: 150,
            temperature: 0.7,
            do_sample: true,
            top_p: 0.9,
            repetition_penalty: 1.1
          }
        })
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`HTTP ${response.status}: ${errorText}`);
      }
      
      const data = await response.json();
      
      // Manejar diferentes formatos de respuesta
      let aiResponse;
      if (Array.isArray(data) && data.length > 0) {
        aiResponse = data[0].generated_text || data[0].text || 'Gracias por contactarnos. ¬øEn qu√© puedo ayudarte?';
      } else if (data.generated_text) {
        aiResponse = data.generated_text;
      } else if (data.text) {
        aiResponse = data.text;
      } else {
        aiResponse = 'Gracias por contactarnos. ¬øEn qu√© puedo ayudarte?';
      }
      
      // Limpiar la respuesta (remover el prompt original si est√° incluido)
      if (aiResponse.includes(enhancedPrompt)) {
        aiResponse = aiResponse.replace(enhancedPrompt, '').trim();
      }
      
      // Guardar en historial
      this.addToConversationHistory(clientId, userMessage, aiResponse);
      
      this.logger.info(`‚úÖ Respuesta generada exitosamente con modelo: ${model}`);
      return aiResponse;
      
    } catch (error) {
      this.logger.error(`Error llamando a Hugging Face: ${error.message}`);
      throw error;
    }
  }

  // Simulaci√≥n de IA contextualizada mejorada
  async callContextualizedAI(context, userMessage, businessType, businessSettings = {}, customPrompt = '', clientId = null, branchId = null) {
    const lowerMessage = userMessage.toLowerCase();
    
      // Procesando con IA contextualizada mejorada
    
    // Generar respuesta m√°s inteligente basada en el contexto
    const contextualResponse = await this.generateContextualResponse(userMessage, businessType, context, businessSettings, branchId, clientId);
    
    // Si tenemos clientId y branchId, usar contexto avanzado
    if (clientId && branchId) {
      // Obtener contexto avanzado del cliente
      const clientContext = await this.getAdvancedClientContext(clientId, branchId);
      
      // Personalizar respuesta con contexto avanzado
      const personalizedResponse = this.generatePersonalizedResponse(clientContext, contextualResponse);
      
      // Actualizar contexto avanzado
      const intent = this.analyzeUserIntent(userMessage);
      await this.updateAdvancedClientContext(clientId, branchId, userMessage, personalizedResponse, intent);
      
      // Respuesta contextual generada
      
      return personalizedResponse;
    }
    
    // Respuesta contextual generada
    
    return contextualResponse;
  }

  // Generar respuesta contextual inteligente
  async generateContextualResponse(userMessage, businessType, context, businessSettings, branchId = null, clientId = null) {
    const lowerMessage = userMessage.toLowerCase();
    
    // Cargar configuraci√≥n autom√°ticamente si no est√° en memoria
    if (branchId && !this.menuContent.has(branchId)) {
      console.log('üîÑ Cargando configuraci√≥n autom√°ticamente para:', branchId);
      await this.loadBranchConfig(branchId);
    }
    
    // An√°lisis sem√°ntico mejorado
    const intent = this.analyzeUserIntent(userMessage);
    const sentiment = this.analyzeSentiment(userMessage);
    const urgency = this.analyzeUrgency(userMessage);
    
    console.log('üß† An√°lisis sem√°ntico:');
    console.log(`   Intenci√≥n: ${intent}`);
    console.log(`   Sentimiento: ${sentiment}`);
    console.log(`   Urgencia: ${urgency}`);
    
    // Generar respuesta basada en an√°lisis
    return await this.buildIntelligentResponse(intent, sentiment, urgency, businessType, userMessage, context, branchId, clientId);
  }

  // Analizar intenci√≥n del usuario con tolerancia a errores de escritura
  analyzeUserIntent(message) {
    const lowerMessage = message.toLowerCase();
    
    // Funci√≥n para normalizar texto (corregir errores comunes)
    const normalizeText = (text) => {
      return text
        .replace(/√±/g, 'n')
        .replace(/√°/g, 'a')
        .replace(/√©/g, 'e')
        .replace(/√≠/g, 'i')
        .replace(/√≥/g, 'o')
        .replace(/√∫/g, 'u')
        .replace(/√º/g, 'u')
        .replace(/√ß/g, 'c')
        .replace(/[bcdfghjklmnpqrstvwxyz]{2,}/g, (match) => match[0]) // Reducir consonantes duplicadas
        .replace(/[aeiou]{2,}/g, (match) => match[0]) // Reducir vocales duplicadas
        .replace(/[^a-z0-9\s]/g, '') // Remover caracteres especiales
        .replace(/\s+/g, ' ') // Normalizar espacios
        .trim();
    };
    
    const normalizedMessage = normalizeText(lowerMessage);
    
    // PRIORIDAD 1: Pedidos (con variaciones de escritura)
    const orderKeywords = [
      'pedido', 'pedir', 'pido', 'pidir', 'pedir',
      'orden', 'ordernar', 'ordenar', 'ordern',
      'quiero', 'quier', 'quero', 'quero',
      'dame', 'dam', 'dame', 'damelo',
      'me das', 'me da', 'me das',
      'tomar', 'tomar', 'tomar',
      'me gustaria', 'me gustaria', 'me gustaria', 'megustaria',
      'desayuno', 'desayuno', 'desayuno', 'desayuno',
      'almuerzo', 'almuerzo', 'almuerzo',
      'cena', 'cena', 'cena',
      'cappuccino', 'capuchino', 'capuccino', 'capuchino',
      'croissant', 'croisant', 'croisant', 'croisant',
      'yogurt', 'yogur', 'yogurt', 'yogur',
      'fruta', 'fruta', 'fruta',
      'sandwich', 'sandwich', 'sandwich', 'sandwich',
      'cafe americano', 'cafe americano', 'cafe americano'
    ];
    
    const hasOrderKeyword = orderKeywords.some(keyword => 
      normalizedMessage.includes(normalizeText(keyword))
    );
    
    if (hasOrderKeyword) {
      return 'hacer_pedido';
    }
    
    // PRIORIDAD 2: Saludos (variantes comunes: hola/ola/holi/oli/hi/hello/hey)
    const isGreetingMsg = (
      lowerMessage.includes('hola') ||
      lowerMessage === 'ola' || lowerMessage.startsWith('ola ') || lowerMessage.endsWith(' ola') || lowerMessage.includes(' ola ')
      || lowerMessage.includes('holi') || lowerMessage.includes('oli')
      || lowerMessage.includes('hi') || lowerMessage.includes('hello') || lowerMessage.includes('hey')
      || lowerMessage.includes('buenos') || lowerMessage.includes('buenas')
      || lowerMessage.includes('buen dia') || lowerMessage.includes('buenas tardes') || lowerMessage.includes('buenas noches')
    );
    if (isGreetingMsg) {
      return 'saludo';
    }
    
    // PRIORIDAD 3: Consultas de men√∫
    if (lowerMessage.includes('men√∫ pdf') || lowerMessage.includes('menu pdf') || lowerMessage.includes('pdf')) {
      return 'consulta_menu_pdf';
    }
    if (lowerMessage.includes('men√∫') || lowerMessage.includes('menu') || lowerMessage.includes('qu√© tienen') ||
        lowerMessage.includes('bebidas') || lowerMessage.includes('caf√©') || lowerMessage.includes('cafe') ||
        lowerMessage.includes('tienes') || lowerMessage.includes('tienen')) {
      return 'consulta_menu';
    }
    
    // PRIORIDAD 4: Recomendaciones
    if (lowerMessage.includes('recomendaci√≥n') || lowerMessage.includes('recomendacion') || 
        lowerMessage.includes('recomienda') || lowerMessage.includes('recomienda') ||
        lowerMessage.includes('sugerencia') || lowerMessage.includes('sugerencia') ||
        lowerMessage.includes('qu√© me recomiendas') || lowerMessage.includes('que me recomiendas') ||
        lowerMessage.includes('qu√© me sugieres') || lowerMessage.includes('que me sugieres') ||
        lowerMessage.includes('no s√© qu√© pedir') || lowerMessage.includes('no se que pedir') ||
        lowerMessage.includes('ay√∫dame a elegir') || lowerMessage.includes('ayudame a elegir')) {
      return 'recomendacion';
    }
    
    // PRIORIDAD 5: Otras consultas
    if (lowerMessage.includes('precio') || lowerMessage.includes('cuesta') || lowerMessage.includes('vale')) {
      return 'consulta_precio';
    } else if (lowerMessage.includes('agregar') || lowerMessage.includes('agr√©gale') || lowerMessage.includes('agregue') || 
               lowerMessage.includes('a√±adir') || lowerMessage.includes('a√±ade') || lowerMessage.includes('poner') ||
               lowerMessage.includes('incluir') || lowerMessage.includes('sumar') || lowerMessage.includes('m√°s')) {
      return 'modificar_pedido';
    } else if (lowerMessage.includes('total') || lowerMessage.includes('cu√°nto queda') || lowerMessage.includes('cuanto queda') ||
               lowerMessage.includes('suma') || lowerMessage.includes('precio final') || lowerMessage.includes('costo total')) {
      return 'consulta_total';
    } else if (lowerMessage.includes('horario') || lowerMessage.includes('abierto') || lowerMessage.includes('cierra')) {
      return 'consulta_horario';
    } else if (lowerMessage.includes('direcci√≥n') || lowerMessage.includes('ubicaci√≥n') || lowerMessage.includes('d√≥nde')) {
      return 'consulta_ubicacion';
    } else if (lowerMessage.includes('gracias') || lowerMessage.includes('chao') || lowerMessage.includes('adi√≥s')) {
      return 'despedida';
    } else {
      return 'consulta_general';
    }
  }

  // Analizar sentimiento
  analyzeSentiment(message) {
    const lowerMessage = message.toLowerCase();
    
    if (lowerMessage.includes('gracias') || lowerMessage.includes('excelente') || lowerMessage.includes('perfecto')) {
      return 'positivo';
    } else if (lowerMessage.includes('problema') || lowerMessage.includes('malo') || lowerMessage.includes('queja')) {
      return 'negativo';
    } else {
      return 'neutral';
    }
  }

  // Analizar urgencia
  analyzeUrgency(message) {
    const lowerMessage = message.toLowerCase();
    
    if (lowerMessage.includes('urgente') || lowerMessage.includes('r√°pido') || lowerMessage.includes('ya')) {
      return 'alta';
    } else if (lowerMessage.includes('cuando') || lowerMessage.includes('despu√©s') || lowerMessage.includes('luego')) {
      return 'baja';
    } else {
      return 'normal';
    }
  }

  // Construir respuesta inteligente mejorada
  async buildIntelligentResponse(intent, sentiment, urgency, businessType, userMessage, context, branchId = null, clientId = null) {
    const responses = {
      saludo: {
        positivo: [
          "¬°Hola! üòä Me da mucho gusto saludarte. ¬øEn qu√© puedo ayudarte hoy?",
          "¬°Hola! üòä ¬°Qu√© bueno verte por aqu√≠! ¬øC√≥mo est√°s? ¬øEn qu√© te puedo ayudar?",
          "¬°Hola! üòä ¬°Excelente d√≠a! ¬øEn qu√© puedo asistirte hoy?",
          "¬°Hola! üòä ¬°Qu√© alegr√≠a verte! ¬øC√≥mo has estado? ¬øEn qu√© puedo ayudarte?",
          "¬°Hola! üòä ¬°Qu√© gusto saludarte! ¬øC√≥mo est√°s? ¬øEn qu√© te puedo asistir?"
        ],
        neutral: [
          "¬°Hola! üòä ¬øC√≥mo est√°s? ¬øEn qu√© puedo ayudarte hoy?",
          "¬°Hola! üòä Bienvenido. ¬øEn qu√© te puedo ayudar?",
          "¬°Hola! üòä ¬øC√≥mo te va? ¬øEn qu√© puedo asistirte?",
          "¬°Hola! üòä ¬øQu√© tal? ¬øEn qu√© puedo ayudarte?",
          "¬°Hola! üòä ¬øC√≥mo andas? ¬øEn qu√© te puedo ayudar?"
        ],
        negativo: [
          "¬°Hola! üòä Entiendo que puede haber alguna preocupaci√≥n. ¬øEn qu√© puedo ayudarte a resolverla?",
          "¬°Hola! üòä Veo que necesitas ayuda. Estoy aqu√≠ para asistirte, ¬øqu√© necesitas?",
          "¬°Hola! üòä No te preocupes, estoy aqu√≠ para ayudarte. ¬øEn qu√© puedo asistirte?",
          "¬°Hola! üòä Entiendo que hay algo que resolver. ¬øEn qu√© puedo ayudarte?",
          "¬°Hola! üòä Veo que necesitas apoyo. Estoy aqu√≠ para ti, ¬øqu√© necesitas?"
        ]
      },
      consulta_menu: {
        positivo: [
          "¬°Perfecto! üòä Te encantar√° nuestro men√∫. Tenemos opciones deliciosas:",
          "¬°Excelente elecci√≥n! üòä Nuestro men√∫ tiene opciones incre√≠bles:",
          "¬°Genial! üòä Te voy a mostrar nuestras mejores opciones:",
          "¬°Fant√°stico! üòä Nuestro men√∫ est√° lleno de opciones deliciosas:",
          "¬°Qu√© bueno! üòä Te voy a mostrar todo lo que tenemos disponible:"
        ],
        neutral: [
          "Claro, te muestro nuestro men√∫:",
          "Por supuesto, aqu√≠ tienes nuestras opciones:",
          "Perfecto, aqu√≠ est√° nuestro men√∫:",
          "Por supuesto, aqu√≠ tienes todo nuestro men√∫:",
          "Claro, te muestro todas nuestras opciones:"
        ],
        negativo: [
          "Entiendo tu consulta. Te muestro nuestras opciones disponibles:",
          "Claro, aqu√≠ tienes nuestro men√∫ completo:",
          "Por supuesto, estas son nuestras opciones:",
          "Entiendo, aqu√≠ tienes todo nuestro men√∫:",
          "Claro, te muestro todas nuestras opciones disponibles:"
        ]
      },
      recomendacion: {
        positivo: [
          "¬°Perfecto! üòä Me encanta ayudarte a encontrar algo delicioso. Te har√© algunas preguntas:",
          "¬°Excelente! üòä Vamos a encontrar tu opci√≥n perfecta. Te pregunto:",
          "¬°Genial! üòä Te ayudo a elegir algo incre√≠ble. Respondeme:",
          "¬°Fant√°stico! üòä Vamos a descubrir qu√© te va a encantar. Te pregunto:",
          "¬°Qu√© bueno! üòä Te ayudo a encontrar tu favorito. Respondeme:"
        ],
        neutral: [
          "Claro, te ayudo a elegir algo perfecto para ti. Te pregunto:",
          "Por supuesto, vamos a encontrar tu opci√≥n ideal. Respondeme:",
          "Perfecto, te ayudo a decidir. Te pregunto:",
          "Por supuesto, vamos a encontrar algo delicioso. Respondeme:",
          "Claro, te ayudo a elegir. Te pregunto:"
        ],
        negativo: [
          "Entiendo que necesitas ayuda para elegir. Te pregunto:",
          "Claro, te ayudo a encontrar algo que te guste. Respondeme:",
          "Por supuesto, vamos a encontrar tu opci√≥n perfecta. Te pregunto:",
          "Entiendo, te ayudo a decidir. Respondeme:",
          "Claro, vamos a encontrar algo delicioso para ti. Te pregunto:"
        ]
      },
      consulta_precio: {
        positivo: [
          "¬°Perfecto! üòä Te ayudo con la informaci√≥n de precios:",
          "¬°Excelente! üòä Aqu√≠ tienes los precios que necesitas:",
          "¬°Genial! üòä Te muestro toda la informaci√≥n de precios:"
        ],
        neutral: [
          "Claro, aqu√≠ tienes la informaci√≥n de precios:",
          "Por supuesto, estos son nuestros precios:",
          "Perfecto, aqu√≠ tienes los precios:"
        ],
        negativo: [
          "Entiendo tu consulta sobre precios. Aqu√≠ tienes la informaci√≥n:",
          "Claro, aqu√≠ tienes todos nuestros precios:",
          "Por supuesto, esta es la informaci√≥n de precios:"
        ]
      },
      hacer_pedido: {
        positivo: [
          "¬°Perfecto! üòä Te ayudo con tu pedido. Necesito saber:",
          "¬°Excelente! üòä Me da mucho gusto ayudarte con tu pedido:",
          "¬°Genial! üòä Vamos a armar tu pedido perfecto:"
        ],
        neutral: [
          "Claro, te ayudo con tu pedido. Necesito saber:",
          "Por supuesto, vamos a hacer tu pedido:",
          "Perfecto, aqu√≠ est√° la informaci√≥n para tu pedido:"
        ],
        negativo: [
          "Entiendo que quieres hacer un pedido. Te ayudo con:",
          "Claro, aqu√≠ tienes la informaci√≥n para tu pedido:",
          "Por supuesto, te ayudo con tu pedido:"
        ]
      },
      consulta_horario: {
        positivo: [
          "¬°Perfecto! üòä Te ayudo con la informaci√≥n de horarios:",
          "¬°Excelente! üòä Aqu√≠ tienes nuestros horarios:",
          "¬°Genial! üòä Te muestro cu√°ndo estamos abiertos:"
        ],
        neutral: [
          "Claro, aqu√≠ tienes nuestros horarios:",
          "Por supuesto, estos son nuestros horarios:",
          "Perfecto, aqu√≠ tienes la informaci√≥n de horarios:"
        ],
        negativo: [
          "Entiendo tu consulta sobre horarios. Aqu√≠ tienes la informaci√≥n:",
          "Claro, aqu√≠ tienes nuestros horarios:",
          "Por supuesto, esta es la informaci√≥n de horarios:"
        ]
      },
      consulta_ubicacion: {
        positivo: [
          "¬°Perfecto! üòä Te ayudo con la informaci√≥n de ubicaci√≥n:",
          "¬°Excelente! üòä Aqu√≠ tienes nuestra direcci√≥n:",
          "¬°Genial! üòä Te muestro c√≥mo llegar:"
        ],
        neutral: [
          "Claro, aqu√≠ tienes nuestra ubicaci√≥n:",
          "Por supuesto, esta es nuestra direcci√≥n:",
          "Perfecto, aqu√≠ tienes la informaci√≥n de ubicaci√≥n:"
        ],
        negativo: [
          "Entiendo tu consulta sobre ubicaci√≥n. Aqu√≠ tienes la informaci√≥n:",
          "Claro, aqu√≠ tienes nuestra direcci√≥n:",
          "Por supuesto, esta es la informaci√≥n de ubicaci√≥n:"
        ]
      },
      despedida: {
        positivo: [
          "¬°Fue un placer ayudarte! üòä ¬°Que tengas un excelente d√≠a!",
          "¬°Gracias por contactarnos! üòä ¬°Que tengas un d√≠a maravilloso!",
          "¬°Fue genial ayudarte! üòä ¬°Que tengas un d√≠a incre√≠ble!"
        ],
        neutral: [
          "¬°Gracias por contactarnos! üòä ¬°Que tengas un buen d√≠a!",
          "¬°Fue un placer ayudarte! üòä ¬°Que tengas un buen d√≠a!",
          "¬°Gracias! üòä ¬°Que tengas un d√≠a excelente!"
        ],
        negativo: [
          "Espero haber podido ayudarte. üòä ¬°Que tengas un mejor d√≠a!",
          "Gracias por contactarnos. üòä ¬°Que tengas un buen d√≠a!",
          "Espero haber resuelto tu consulta. üòä ¬°Que tengas un buen d√≠a!"
        ]
      },
      consulta_general: {
        positivo: [
          "¬°Perfecto! üòä Te ayudo con esa informaci√≥n:",
          "¬°Excelente pregunta! üòä Aqu√≠ tienes la respuesta:",
          "¬°Genial! üòä Te explico todo lo que necesitas saber:"
        ],
        neutral: [
          "Claro, te ayudo con esa informaci√≥n:",
          "Por supuesto, aqu√≠ tienes la respuesta:",
          "Perfecto, te explico lo que necesitas saber:"
        ],
        negativo: [
          "Entiendo tu consulta. Te ayudo con:",
          "Claro, aqu√≠ tienes la informaci√≥n:",
          "Por supuesto, te explico lo que necesitas:"
        ]
      }
    };

    // Obtener respuesta base seg√∫n intenci√≥n y sentimiento
    const baseResponse = responses[intent]?.[sentiment] || responses[intent]?.neutral || [
      "Entiendo tu consulta. ¬øC√≥mo puedo ayudarte?"
    ];

    // Seleccionar respuesta aleatoria
    const selectedResponse = baseResponse[Math.floor(Math.random() * baseResponse.length)];

    // Agregar contenido espec√≠fico seg√∫n el tipo de negocio
    let specificContent = '';
    if (intent === 'consulta_menu') {
      // Resumen del men√∫ siempre (resumido)
      specificContent = this.getMenuSummary(businessType, branchId);
    } else if (intent === 'consulta_menu_pdf') {
      // Enviar indicaciones de PDF si existe, si no, enviar el resumen como fallback
      specificContent = await this.getMenuPDFOrSummary(branchId, businessType);
    } else if (intent === 'consulta_precio') {
      specificContent = this.getPriceInfo(businessType);
    } else if (intent === 'hacer_pedido') {
      // Procesar pedido autom√°ticamente si detecta productos espec√≠ficos
      const customPrompt = this.aiPrompts.get(branchId) || null;
      const orderAnalysis = this.processOrder(userMessage, branchId, customPrompt);
      if (orderAnalysis.products.length > 0) {
        specificContent = this.generateOrderResponse(orderAnalysis);
      } else {
        specificContent = this.getOrderInfo(businessType);
      }
    } else if (intent === 'consulta_horario') {
      specificContent = this.getScheduleInfo(businessType);
    } else if (intent === 'consulta_ubicacion') {
      specificContent = this.getLocationInfo(businessType);
    } else if (intent === 'recomendacion') {
      specificContent = this.getRecommendationQuestion(clientId, branchId);
    }

    // Construir respuesta final
    let finalResponse = selectedResponse;
    if (specificContent) {
      // Para men√∫s de alitas mix, mostrar solo el contenido formateado
      if (intent === 'consulta_menu' && specificContent.includes('MEN√ö ALITAS MIX')) {
        finalResponse = specificContent;
      } else {
        finalResponse += '\n\n' + specificContent;
      }
    }

    // Conversaci√≥n m√°s natural sin frases repetitivas

    return finalResponse;
  }

  // Obtener contenido del men√∫ seg√∫n tipo de negocio
  getMenuContent(businessType) {
    const menus = {
      restaurant: `üçΩÔ∏è *NUESTRO MEN√ö*

ü•ò *PLATOS PRINCIPALES*
‚Ä¢ Bandeja Paisa - $15.000
‚Ä¢ Sancocho de Pollo - $12.000
‚Ä¢ Arroz con Pollo - $10.000
‚Ä¢ Pescado Frito - $14.000

ü•ó *ENSALADAS*
‚Ä¢ Ensalada C√©sar - $8.000
‚Ä¢ Ensalada Mixta - $6.000

üçπ *BEBIDAS*
‚Ä¢ Jugo Natural - $4.000
‚Ä¢ Gaseosa - $3.000
‚Ä¢ Agua - $2.000`,

      cafe: `‚òï *NUESTRO MEN√ö*

‚òï *CAF√âS*
‚Ä¢ Caf√© Americano - $3.500
‚Ä¢ Cappuccino - $4.000
‚Ä¢ Caf√© Latte - $4.200
‚Ä¢ Frapp√© de Vainilla - $4.800

ü•ê *PASTELER√çA*
‚Ä¢ Croissant - $3.000
‚Ä¢ Muffin de Ar√°ndanos - $2.500
‚Ä¢ Brownie de Chocolate - $3.200

ü•§ *BEBIDAS FR√çAS*
‚Ä¢ Limonada Natural - $3.000
‚Ä¢ Smoothie de Frutas - $5.000`,

      pharmacy: `üíä *PRODUCTOS DISPONIBLES*

üíä *MEDICAMENTOS*
‚Ä¢ Analg√©sicos
‚Ä¢ Antigripales
‚Ä¢ Vitaminas
‚Ä¢ Medicamentos recetados

üß¥ *CUIDADO PERSONAL*
‚Ä¢ Shampoo y Acondicionador
‚Ä¢ Jabones
‚Ä¢ Cremas corporales
‚Ä¢ Productos de higiene

üè• *SERVICIOS*
‚Ä¢ Consulta farmac√©utica
‚Ä¢ Entrega a domicilio
‚Ä¢ Control de presi√≥n arterial`
    };

    return menus[businessType] || menus.cafe;
  }

  // Formatear men√∫ espec√≠fico para alitas mix
  formatAlitasMenu(menuContent) {
    return `üçó *MEN√ö ALITAS MIX*

üçΩÔ∏è *COMBOS PERSONALES*
‚Ä¢ Combo 1: 5 alitas + acompa√±ante + salsas - $21.900
‚Ä¢ Combo 2: 7 alitas + acompa√±ante + salsas - $26.900
‚Ä¢ Combo 3: 9 alitas + acompa√±ante + salsas - $30.900
‚Ä¢ Combo 4: 14 alitas + acompa√±ante + salsas - $42.900

üë®‚Äçüë©‚Äçüëß‚Äçüë¶ *COMBOS FAMILIARES*
‚Ä¢ Familiar 1: 20 alitas + acompa√±ante + salsas + gaseosa 1.5L - $65.900
‚Ä¢ Familiar 2: 30 alitas + acompa√±ante + salsas + gaseosa 1.5L - $62.900
‚Ä¢ Familiar 3: 40 alitas + acompa√±ante + salsas + gaseosa 1.5L - $87.900
‚Ä¢ Familiar 4: 50 alitas + 2 acompa√±antes + salsas + gaseosa 1.5L - $107.900

üíë *COMBO EMPAREJADO*
‚Ä¢ Emparejado: 16 alitas + 2 acompa√±antes + salsas + 2 limonadas - $123.900

üçü *ACOMPA√ëANTES*
‚Ä¢ Papas criollas - $9.000
‚Ä¢ Cascos - $9.000
‚Ä¢ Yucas - $9.000
‚Ä¢ Arepitas - $9.000
‚Ä¢ Papas francesa - $9.000

üå∂Ô∏è *SALSAS TRADICIONALES*
BBQ, Miel mostaza, Picante suave/full, Envinada, Frutos rojos, Parmesano, Maracuy√°, Lim√≥n pimienta

‚≠ê *SALSAS PREMIUM* (gratis una)
Dulce ma√≠z, La original, Cheddar, Sour cream, Pepinillo

üí∞ *PRECIOS ADICIONALES*
‚Ä¢ Alita individual: $3.000
‚Ä¢ Salsa premium adicional: $3.000

Si quieres el PDF completo, dime: "men√∫ pdf".`;
  }

  // Obtener resumen breve del men√∫ (resumido) usando men√∫ cargado si existe
  getMenuSummary(businessType, branchId) {
    const loaded = branchId && this.menuContent.has(branchId) ? this.menuContent.get(branchId) : null;
    if (loaded) {
      // Formatear men√∫ espec√≠ficamente para alitas mix
      if ((loaded.includes('ALITAS') || loaded.includes('A LITAS')) && (loaded.includes('COMBO') || loaded.includes('combo'))) {
        return this.formatAlitasMenu(loaded);
      }
      // Extraer primeras l√≠neas por categor√≠as comunes
      const lines = loaded.split(/\r?\n/).filter(Boolean);
      const top = lines.slice(0, 12).join('\n');
      return `üìÑ *MEN√ö RESUMIDO*\n\n${top}\n\nSi quieres el PDF completo, dime: "men√∫ pdf".`;
    }
    // Resumen por defecto seg√∫n tipo
    const full = this.getMenuContent(businessType);
    const lines = full.split(/\r?\n/).filter(Boolean);
    const top = lines.slice(0, 12).join('\n');
    return `üìÑ *MEN√ö RESUMIDO*\n\n${top}\n\nSi quieres el PDF completo, dime: "men√∫ pdf".`;
  }

  // Obtener link/indicaciones de PDF o fallback al resumen
  async getMenuPDFOrSummary(branchId, businessType) {
    try {
      const BranchAIConfig = require('../models/BranchAIConfig');
      const config = await BranchAIConfig.findOne({ branchId: branchId }) || await BranchAIConfig.findOne({ branchId });
      const pdfPath = config?.files?.menuPDF?.path;
      if (pdfPath) {
        return `üìé *MEN√ö PDF*\n\nPuedes revisar el men√∫ completo aqu√≠ (PDF): ${pdfPath}`;
      }
    } catch (_) {}
    return this.getMenuSummary(businessType, branchId);
  }

  // Obtener informaci√≥n de precios
  getPriceInfo(businessType) {
    return `üí∞ *INFORMACI√ìN DE PRECIOS*

Los precios pueden variar seg√∫n el producto espec√≠fico. Te recomiendo preguntarme por el precio de alg√∫n producto en particular.

¬øHay alg√∫n producto espec√≠fico del que quieras saber el precio?`;
  }

  // Obtener informaci√≥n de pedidos
  getOrderInfo(businessType) {
    return `üõí *INFORMACI√ìN DE PEDIDOS*

Para hacer tu pedido, necesito saber:
‚Ä¢ ¬øQu√© productos quieres?
‚Ä¢ ¬øCu√°ntas unidades de cada uno?
‚Ä¢ ¬øEs para llevar o consumo en sitio?

¬øQu√© te gustar√≠a pedir?`;
  }

  // Obtener informaci√≥n de horarios
  getScheduleInfo(businessType) {
    const schedules = {
      restaurant: `üïí *NUESTROS HORARIOS*

üìÖ *LUNES A VIERNES*
‚Ä¢ Desayuno: 7:00 AM - 11:00 AM
‚Ä¢ Almuerzo: 12:00 PM - 3:00 PM
‚Ä¢ Cena: 6:00 PM - 10:00 PM

üìÖ *S√ÅBADOS Y DOMINGOS*
‚Ä¢ Desayuno: 8:00 AM - 12:00 PM
‚Ä¢ Almuerzo: 12:00 PM - 4:00 PM
‚Ä¢ Cena: 6:00 PM - 11:00 PM

¬øEn qu√© horario te gustar√≠a venir?`,

      cafe: `üïí *NUESTROS HORARIOS*

üìÖ *LUNES A VIERNES*
‚Ä¢ 6:00 AM - 10:00 PM

üìÖ *S√ÅBADOS*
‚Ä¢ 7:00 AM - 11:00 PM

üìÖ *DOMINGOS*
‚Ä¢ 8:00 AM - 9:00 PM

¬øEn qu√© horario te gustar√≠a visitarnos?`,

      pharmacy: `üïí *NUESTROS HORARIOS*

üìÖ *LUNES A VIERNES*
‚Ä¢ 7:00 AM - 9:00 PM

üìÖ *S√ÅBADOS*
‚Ä¢ 8:00 AM - 8:00 PM

üìÖ *DOMINGOS*
‚Ä¢ 9:00 AM - 6:00 PM

¬øEn qu√© horario necesitas nuestros servicios?`
    };

    return schedules[businessType] || schedules.cafe;
  }

  // Obtener informaci√≥n de ubicaci√≥n
  getLocationInfo(businessType) {
    const locations = {
      restaurant: `üìç *NUESTRA UBICACI√ìN*

üè¢ *DIRECCI√ìN*
Calle 123 #45-67, Centro
Bogot√°, Colombia

üöó *C√ìMO LLEGAR*
‚Ä¢ En carro: Carrera 7 con Calle 123
‚Ä¢ En TransMilenio: Estaci√≥n Centro
‚Ä¢ En taxi: "Restaurante EasyBranch Centro"

üì± *CONTACTO*
‚Ä¢ Tel√©fono: (601) 234-5678
‚Ä¢ WhatsApp: +57 300 123 4567

¬øNecesitas ayuda para llegar?`,

      cafe: `üìç *NUESTRA UBICACI√ìN*

üè¢ *DIRECCI√ìN*
Carrera 15 #93-45, Zona Rosa
Bogot√°, Colombia

üöó *C√ìMO LLEGAR*
‚Ä¢ En carro: Carrera 15 con Calle 93
‚Ä¢ En TransMilenio: Estaci√≥n Zona Rosa
‚Ä¢ En taxi: "Cafeter√≠a EasyBranch Zona Rosa"

üì± *CONTACTO*
‚Ä¢ Tel√©fono: (601) 234-5678
‚Ä¢ WhatsApp: +57 300 123 4567

¬øNecesitas ayuda para llegar?`,

      pharmacy: `üìç *NUESTRA UBICACI√ìN*

üè¢ *DIRECCI√ìN*
Avenida 68 #25-30, Chapinero
Bogot√°, Colombia

üöó *C√ìMO LLEGAR*
‚Ä¢ En carro: Avenida 68 con Calle 25
‚Ä¢ En TransMilenio: Estaci√≥n Chapinero
‚Ä¢ En taxi: "Farmacia EasyBranch Chapinero"

üì± *CONTACTO*
‚Ä¢ Tel√©fono: (601) 234-5678
‚Ä¢ WhatsApp: +57 300 123 4567

¬øNecesitas ayuda para llegar?`
    };

    return locations[businessType] || locations.cafe;
  }

  // Obtener preguntas de recomendaci√≥n espec√≠ficas seg√∫n el tipo de negocio
  getRecommendationQuestions(branchId) {
    // Verificar si es un men√∫ de alitas mix
    const menuContent = this.menuContent.get(branchId) || '';
    const isAlitasMix = (menuContent.includes('ALITAS') || menuContent.includes('A LITAS')) && 
                       (menuContent.includes('COMBO') || menuContent.includes('combo'));
    
    if (isAlitasMix) {
      return [
        {
          question: "¬øPara cu√°ntas personas es tu pedido?",
          options: ["Solo para m√≠", "Para 2-3 personas", "Para 4-5 personas", "Para 6+ personas"],
          category: "people_count"
        },
        {
          question: "¬øQu√© tipo de salsas prefieres?",
          options: ["Salsas tradicionales (BBQ, miel mostaza)", "Salsas premium (cheddar, sour cream)", "Me gustan ambas", "No s√©"],
          category: "sauce_preference"
        },
        {
          question: "¬øC√≥mo prefieres las alitas?",
          options: ["Ba√±adas con salsa", "Con salsa aparte", "Me da igual", "No s√©"],
          category: "sauce_style"
        },
        {
          question: "¬øQu√© acompa√±ante prefieres?",
          options: ["Papas criollas", "Cascos o yucas", "Arepitas", "No s√©"],
          category: "side_preference"
        },
        {
          question: "¬øCu√°l es tu presupuesto aproximado?",
          options: ["$20,000 - $30,000", "$30,000 - $50,000", "$50,000 - $80,000", "No importa"],
          category: "budget"
        }
      ];
    }
    
    // Preguntas por defecto para cafeter√≠a
    return [
      {
        question: "¬øQu√© prefieres para desayunar?",
        options: ["Algo dulce", "Algo salado", "Algo balanceado", "No s√©"],
        category: "preference"
      },
      {
        question: "¬øTe gusta m√°s el caf√© fuerte o suave?",
        options: ["Fuerte", "Suave", "No me gusta el caf√©", "Me da igual"],
        category: "coffee_strength"
      },
      {
        question: "¬øPrefieres bebidas calientes o fr√≠as?",
        options: ["Calientes", "Fr√≠as", "Ambas", "No s√©"],
        category: "temperature"
      },
      {
        question: "¬øTe gustan los postres?",
        options: ["S√≠, mucho", "A veces", "No mucho", "No me gustan"],
        category: "desserts"
      },
      {
        question: "¬øCu√°l es tu presupuesto aproximado?",
        options: ["$3,000 - $5,000", "$5,000 - $8,000", "$8,000 - $12,000", "No importa"],
        category: "budget"
      }
    ];
  }

  // Sistema de recomendaciones estilo Akinator
  getRecommendationQuestion(clientId, branchId) {
    // Obtener o crear perfil de recomendaciones del cliente
    const recommendationProfile = this.getRecommendationProfile(clientId, branchId);
    
    // Determinar qu√© pregunta hacer basada en el progreso
    const questionNumber = recommendationProfile.questionsAnswered;
    
    // Obtener preguntas espec√≠ficas seg√∫n el tipo de negocio
    const questions = this.getRecommendationQuestions(branchId);
    
    if (questionNumber >= questions.length) {
      // Generar recomendaci√≥n final
      return this.generateFinalRecommendation(recommendationProfile, branchId);
    }
    
    const currentQuestion = questions[questionNumber];
    
    return `ü§ñ *PREGUNTA ${questionNumber + 1} DE ${questions.length}*

${currentQuestion.question}

üìù *OPCIONES:*
${currentQuestion.options.map((option, index) => `${index + 1}. ${option}`).join('\n')}

Responde con el n√∫mero de tu opci√≥n preferida (1, 2, 3 o 4)`;
  }

  // Obtener perfil de recomendaciones del cliente
  getRecommendationProfile(clientId, branchId) {
    const profileKey = `recommendation_${clientId}_${branchId}`;
    
    if (!this.recommendationProfiles) {
      this.recommendationProfiles = new Map();
    }
    
    if (!this.recommendationProfiles.has(profileKey)) {
      this.recommendationProfiles.set(profileKey, {
        questionsAnswered: 0,
        answers: [],
        preferences: {},
        lastActivity: new Date()
      });
    }
    
    return this.recommendationProfiles.get(profileKey);
  }

  // Generar recomendaci√≥n final basada en las respuestas
  generateFinalRecommendation(profile, branchId) {
    const recommendations = [];
    
    // Obtener productos del men√∫ cargado en la sucursal
    const menuProducts = this.getMenuProductsFromBranch(branchId);
    
    // Si es un men√∫ de alitas mix, usar l√≥gica espec√≠fica
    if (menuProducts.length > 0 && menuProducts[0].category === 'alitas') {
      return this.generateAlitasRecommendation(profile, menuProducts);
    }
    
    // L√≥gica de recomendaci√≥n basada en respuestas (m√©todo original)
    if (profile.answers[0] === "Algo dulce") {
      recommendations.push(...this.filterProductsByCategory(menuProducts, ['frapp√©', 'muffin', 'cheesecake', 'tiramis√∫', 'brownie', 'postres']));
    } else if (profile.answers[0] === "Algo salado") {
      recommendations.push(...this.filterProductsByCategory(menuProducts, ['desayuno', 'sandwich', 'croissant', 'panini', 'wrap']));
    } else {
      recommendations.push(...this.filterProductsByCategory(menuProducts, ['desayuno', 'caf√©', 'bebidas']));
    }
    
    if (profile.answers[1] === "Fuerte") {
      recommendations.push(...this.filterProductsByCategory(menuProducts, ['americano', 'mocha', 'espresso']));
    } else if (profile.answers[1] === "Suave") {
      recommendations.push(...this.filterProductsByCategory(menuProducts, ['latte', 'cappuccino', 'macchiato']));
    }
    
    if (profile.answers[2] === "Fr√≠as") {
      recommendations.push(...this.filterProductsByCategory(menuProducts, ['frapp√©', 'helado', 'smoothie', 'limonada']));
    } else if (profile.answers[2] === "Calientes") {
      recommendations.push(...this.filterProductsByCategory(menuProducts, ['americano', 'cappuccino', 'latte', 'mocha']));
    }
    
    // Aplicar filtro de presupuesto si est√° disponible
    if (profile.answers[4]) {
      const budgetFilter = this.getBudgetFilter(profile.answers[4]);
      recommendations.push(...this.filterProductsByPrice(menuProducts, budgetFilter));
    }
    
    // Eliminar duplicados y tomar los primeros 3
    const uniqueRecommendations = [...new Set(recommendations)].slice(0, 3);
    
    return `üéØ *RECOMENDACIONES PERSONALIZADAS PARA TI*

Bas√°ndome en tus respuestas, te recomiendo:

${uniqueRecommendations.map((rec, index) => `${index + 1}. ${rec}`).join('\n')}

üí° *¬øTe gusta alguna de estas opciones?*
Responde con el n√∫mero de tu favorita o escribe "otra" si quieres m√°s opciones.

üîÑ *¬øQuieres empezar de nuevo?*
Escribe "recomendaci√≥n" para hacer el test otra vez.`;
  }

  // Obtener productos del men√∫ cargado en la sucursal
  getMenuProductsFromBranch(branchId) {
    // Extraer productos del men√∫ cargado en memoria
    const menuContent = this.menuContent.get(branchId) || '';
    
    // Si es un men√∫ de alitas mix, usar parser espec√≠fico
    if ((menuContent.includes('ALITAS') || menuContent.includes('A LITAS')) && 
        (menuContent.includes('COMBO') || menuContent.includes('combo'))) {
      return this.getAlitasProductsFromMenu(menuContent);
    }
    
    // Parsear el men√∫ para extraer productos y precios (m√©todo original)
    const products = [];
    
    // Buscar patrones de productos con precios
    const productPattern = /‚Ä¢\s*([^-\n]+?)\s*-\s*\$([0-9,\.]+)/g;
    let match;
    
    while ((match = productPattern.exec(menuContent)) !== null) {
      const productName = match[1].trim();
      const price = parseInt(match[2].replace(/[,\s]/g, ''));
      
      products.push({
        name: productName,
        price: price,
        category: this.categorizeProduct(productName)
      });
    }
    
    return products;
  }

  // Extraer productos espec√≠ficos del men√∫ de alitas mix
  getAlitasProductsFromMenu(menuContent) {
    const products = [];
    
    // Extraer precios de la l√≠nea de precios
    const priceMatch = menuContent.match(/\$([0-9,\.\s]+)/g);
    const prices = priceMatch ? priceMatch.map(p => parseInt(p.replace(/[$,\.\s]/g, ''))) : [];
    
    // Mapear combos con sus precios correspondientes
    const comboMappings = [
      // Combos personales
      { name: 'Combo 1', alitas: 5, price: prices[0] || 21900, type: 'personal' },
      { name: 'Combo 2', alitas: 7, price: prices[1] || 26900, type: 'personal' },
      { name: 'Combo 3', alitas: 9, price: prices[2] || 30900, type: 'personal' },
      { name: 'Combo 4', alitas: 14, price: prices[3] || 42900, type: 'personal' },
      
      // Combos familiares
      { name: 'Combo Familiar 1', alitas: 20, price: prices[4] || 65900, type: 'familiar' },
      { name: 'Combo Familiar 2', alitas: 30, price: prices[5] || 62900, type: 'familiar' },
      { name: 'Combo Familiar 3', alitas: 40, price: prices[6] || 87900, type: 'familiar' },
      { name: 'Combo Familiar 4', alitas: 50, price: prices[7] || 107900, type: 'familiar' },
      
      // Combo emparejado
      { name: 'Combo Emparejado', alitas: 16, price: prices[8] || 123900, type: 'emparejado' }
    ];
    
    comboMappings.forEach(combo => {
      products.push({
        name: combo.name,
        price: combo.price,
        category: 'alitas',
        type: combo.type,
        alitasCount: combo.alitas
      });
    });
    
    return products;
  }

  // Generar recomendaci√≥n espec√≠fica para alitas mix
  generateAlitasRecommendation(profile, menuProducts) {
    const recommendations = [];
    
    // Filtrar por n√∫mero de personas (respuesta 0 - people_count)
    const peopleAnswer = profile.answers[0];
    let numPeople = 1;
    
    if (peopleAnswer === "Solo para m√≠") {
      numPeople = 1;
    } else if (peopleAnswer === "Para 2-3 personas") {
      numPeople = 3;
    } else if (peopleAnswer === "Para 4-5 personas") {
      numPeople = 5;
    } else if (peopleAnswer === "Para 6+ personas") {
      numPeople = 6;
    }
    
    if (numPeople === 1) {
      // Para 1 persona, recomendar combos personales
      recommendations.push(...menuProducts.filter(p => p.type === 'personal'));
    } else if (numPeople >= 2 && numPeople <= 3) {
      // Para 2-3 personas, recomendar combos familiares peque√±os (20-30 alitas)
      recommendations.push(...menuProducts.filter(p => p.type === 'familiar' && p.alitasCount <= 30));
    } else if (numPeople >= 4 && numPeople <= 5) {
      // Para 4-5 personas, recomendar combos familiares medianos (30-40 alitas)
      recommendations.push(...menuProducts.filter(p => p.type === 'familiar' && p.alitasCount >= 30 && p.alitasCount <= 40));
    } else if (numPeople >= 6) {
      // Para 6+ personas, recomendar combos familiares grandes (40+ alitas)
      recommendations.push(...menuProducts.filter(p => p.type === 'familiar' && p.alitasCount >= 40));
    }
    
    // Si no hay recomendaciones espec√≠ficas, usar todas las alitas
    if (recommendations.length === 0) {
      recommendations.push(...menuProducts);
    }
    
    // Aplicar filtro de presupuesto si est√° disponible (respuesta 4 - budget)
    if (profile.answers[4]) {
      const budgetAnswer = profile.answers[4];
      let maxBudget = 0;
      
      if (budgetAnswer === "$20,000 - $30,000") {
        maxBudget = 30000;
      } else if (budgetAnswer === "$30,000 - $50,000") {
        maxBudget = 50000;
      } else if (budgetAnswer === "$50,000 - $80,000") {
        maxBudget = 80000;
      }
      
      if (maxBudget > 0) {
        recommendations.splice(0, recommendations.length, 
          ...recommendations.filter(p => p.price <= maxBudget)
        );
      }
    }
    
    // Seleccionar la mejor recomendaci√≥n
    if (recommendations.length > 0) {
      const bestRecommendation = recommendations[0];
      return this.formatAlitasRecommendation(bestRecommendation);
    }
    
    return null;
  }

  // Formatear recomendaci√≥n de alitas
  formatAlitasRecommendation(product) {
    return `Perfecto! üéâ Creo que encontr√© algo que te va a encantar:

üçó *MI RECOMENDACI√ìN PARA TI:*
‚Ä¢ ${product.name} - $${product.price.toLocaleString()}
${product.alitasCount ? `‚Ä¢ ${product.alitasCount} alitas deliciosas` : ''}
${product.type === 'personal' ? '‚Ä¢ Perfecto para ti solo' : ''}
${product.type === 'familiar' ? '‚Ä¢ Ideal para compartir en familia' : ''}
${product.type === 'emparejado' ? '‚Ä¢ Perfecto para una pareja' : ''}

üí∞ *Precio:* $${product.price.toLocaleString()}
üìã *Categor√≠a:* ${product.type === 'personal' ? 'Combo Personal' : product.type === 'familiar' ? 'Combo Familiar' : 'Combo Emparejado'}
üí° *¬øPor qu√© te lo recomiendo?* Se ajusta perfectamente a tus preferencias

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
¬øTe gusta esta recomendaci√≥n? üòä

Puedes:
* Escribir "pedir" para hacer tu pedido
* Escribir "menu" para ver todo el men√∫
* Escribir "otra sugerencia" para buscar algo diferente
* O preguntarme cualquier cosa que necesites üòä`;
  }

  // Categorizar producto basado en su nombre
  categorizeProduct(productName) {
    const name = productName.toLowerCase();
    
    if (name.includes('frapp√©') || name.includes('frappe')) return 'frapp√©';
    if (name.includes('americano')) return 'americano';
    if (name.includes('cappuccino') || name.includes('capuchino')) return 'cappuccino';
    if (name.includes('latte')) return 'latte';
    if (name.includes('mocha')) return 'mocha';
    if (name.includes('helado')) return 'helado';
    if (name.includes('muffin')) return 'muffin';
    if (name.includes('croissant') || name.includes('croisant')) return 'croissant';
    if (name.includes('brownie')) return 'brownie';
    if (name.includes('cheesecake')) return 'cheesecake';
    if (name.includes('tiramis√∫') || name.includes('tiramisu')) return 'tiramis√∫';
    if (name.includes('desayuno')) return 'desayuno';
    if (name.includes('sandwich')) return 'sandwich';
    if (name.includes('panini')) return 'panini';
    if (name.includes('wrap')) return 'wrap';
    if (name.includes('smoothie')) return 'smoothie';
    if (name.includes('limonada')) return 'limonada';
    if (name.includes('jugo')) return 'jugo';
    
    return 'otros';
  }

  // Filtrar productos por categor√≠a
  filterProductsByCategory(products, categories) {
    return products
      .filter(product => categories.some(cat => product.category === cat))
      .map(product => product.name);
  }

  // Filtrar productos por precio
  filterProductsByPrice(products, budgetFilter) {
    return products
      .filter(product => product.price >= budgetFilter.min && product.price <= budgetFilter.max)
      .map(product => product.name);
  }

  // Obtener filtro de presupuesto
  getBudgetFilter(budgetAnswer) {
    switch (budgetAnswer) {
      case "$3,000 - $5,000":
        return { min: 3000, max: 5000 };
      case "$5,000 - $8,000":
        return { min: 5000, max: 8000 };
      case "$8,000 - $12,000":
        return { min: 8000, max: 12000 };
      default:
        return { min: 0, max: 50000 };
    }
  }

  // Procesar respuesta de recomendaci√≥n
  processRecommendationAnswer(clientId, branchId, answer) {
    const profile = this.getRecommendationProfile(clientId, branchId);
    
    // Si es un n√∫mero, es una respuesta a la pregunta
    if (/^[1-4]$/.test(answer.trim())) {
      const questionNumber = profile.questionsAnswered;
      const questions = this.getRecommendationQuestions(branchId);
      
      const selectedOption = questions[questionNumber].options[parseInt(answer) - 1];
      profile.answers[questionNumber] = selectedOption;
      profile.questionsAnswered++;
      profile.lastActivity = new Date();
      
      return this.getRecommendationQuestion(clientId, branchId);
    }
    
    // Si es "pedir", procesar el pedido de la recomendaci√≥n
    if (answer.toLowerCase().includes('pedir')) {
      return this.processRecommendationOrder(clientId, branchId, profile);
    }
    
    // Si es "otra", dar m√°s opciones
    if (answer.toLowerCase().includes('otra')) {
      return this.getAdditionalRecommendations(profile, branchId);
    }
    
    // Si es "recomendaci√≥n", reiniciar
    if (answer.toLowerCase().includes('recomendaci√≥n') || answer.toLowerCase().includes('recomendacion')) {
      profile.questionsAnswered = 0;
      profile.answers = [];
      profile.preferences = {};
      return this.getRecommendationQuestion(clientId, branchId);
    }
    
    return "No entend√≠ tu respuesta. Por favor responde con un n√∫mero (1, 2, 3 o 4) o escribe 'otra' para m√°s opciones.";
  }

  // Procesar pedido basado en recomendaci√≥n
  async processRecommendationOrder(clientId, branchId, profile) {
    try {
      // Generar la recomendaci√≥n final
      const recommendation = this.generateFinalRecommendation(profile, branchId);
      
      if (!recommendation) {
        return "Lo siento, no pude generar una recomendaci√≥n. ¬øPodr√≠as intentar de nuevo?";
      }
      
      // Extraer el nombre del producto de la recomendaci√≥n
      const productMatch = recommendation.match(/\‚Ä¢\s*([^-]+?)\s*-\s*\$/);
      if (!productMatch) {
        return "Lo siento, no pude identificar el producto recomendado. ¬øPodr√≠as intentar de nuevo?";
      }
      
      const productName = productMatch[1].trim();
      
      // Crear un pedido personalizado con las respuestas de la recomendaci√≥n
      const customOrder = this.createOrderFromRecommendation(productName, profile);
      
      // Procesar el pedido personalizado
      const customPrompt = this.aiPrompts.get(branchId) || null;
      const orderAnalysis = this.processOrder(customOrder.message, branchId, customPrompt);
      
      // Aplicar las respuestas de la recomendaci√≥n al an√°lisis del pedido
      if (orderAnalysis.hasProducts) {
        this.applyRecommendationAnswers(orderAnalysis, profile);
        
        // Guardar pedido pendiente
        await this.savePendingOrder(clientId, branchId, orderAnalysis);
        await this.saveOrderToHistory(clientId, branchId, orderAnalysis);
        
        // Generar respuesta del pedido
        return this.generateOrderResponse(orderAnalysis);
      } else {
        return `Perfecto! Quieres pedir ${productName}. 

üõí *INFORMACI√ìN DE PEDIDOS*

Para hacer tu pedido, necesito saber:
‚Ä¢ ¬øQu√© productos quieres?
‚Ä¢ ¬øCu√°ntas unidades de cada uno?
‚Ä¢ ¬øEs para llevar o consumo en sitio?

¬øQu√© te gustar√≠a pedir?`;
      }
    } catch (error) {
      console.error('Error procesando pedido de recomendaci√≥n:', error);
      return "Lo siento, hubo un problema procesando tu pedido. ¬øPodr√≠as intentar de nuevo?";
    }
  }

  // Crear mensaje de pedido basado en recomendaci√≥n
  createOrderFromRecommendation(productName, profile) {
    let message = `quiero ${productName}`;
    
    // Agregar detalles basados en las respuestas
    const answers = profile.answers;
    
    // Agregar tipo de salsas (respuesta 1)
    if (answers[1]) {
      if (answers[1].includes('tradicionales')) {
        message += ' con salsa bbq';
      } else if (answers[1].includes('premium')) {
        message += ' con salsa cheddar';
      } else if (answers[1].includes('ambas')) {
        message += ' con salsa bbq y cheddar';
      }
    }
    
    // Agregar tipo de alitas (respuesta 2)
    if (answers[2]) {
      if (answers[2].includes('Ba√±adas')) {
        message += ' ba√±adas';
      } else if (answers[2].includes('apart')) {
        message += ' con salsa aparte';
      }
    }
    
    // Agregar acompa√±ante (respuesta 3)
    if (answers[3]) {
      if (answers[3].includes('Papas criollas')) {
        message += ' y papas criollas';
      } else if (answers[3].includes('Cascos')) {
        message += ' y cascos';
      } else if (answers[3].includes('Arepitas')) {
        message += ' y arepitas';
      }
    }
    
    return { message, answers };
  }

  // Aplicar respuestas de recomendaci√≥n al an√°lisis del pedido
  applyRecommendationAnswers(orderAnalysis, profile) {
    if (!orderAnalysis.hasProducts) return;
    
    const answers = profile.answers;
    
    orderAnalysis.products.forEach(product => {
      if (product.details) {
        // Aplicar tipo de alitas (respuesta 2)
        if (answers[2]) {
          if (answers[2].includes('Ba√±adas')) {
            product.details.tipoAlitas = 'ba√±adas';
          } else if (answers[2].includes('apart')) {
            product.details.tipoAlitas = 'salsa aparte';
          }
        }
        
        // Aplicar salsas (respuesta 1)
        if (answers[1]) {
          if (answers[1].includes('tradicionales')) {
            product.details.salsas = [{ nombre: 'bbq', tipo: 'tradicional' }];
          } else if (answers[1].includes('premium')) {
            product.details.salsas = [{ nombre: 'cheddar', tipo: 'premium' }];
          } else if (answers[1].includes('ambas')) {
            product.details.salsas = [
              { nombre: 'bbq', tipo: 'tradicional' },
              { nombre: 'cheddar', tipo: 'premium' }
            ];
          }
        }
        
        // Aplicar acompa√±ante (respuesta 3)
        if (answers[3]) {
          if (answers[3].includes('Papas criollas')) {
            product.details.acompanantes = ['papas criollas'];
          } else if (answers[3].includes('Cascos')) {
            product.details.acompanantes = ['cascos'];
          } else if (answers[3].includes('Arepitas')) {
            product.details.acompanantes = ['arepitas'];
          }
        }
      }
    });
    
    // Marcar que no necesita clarificaci√≥n si ya tenemos toda la informaci√≥n
    const hasAllInfo = orderAnalysis.products.every(product => {
      if (!product.details) return false;
      return product.details.tipoAlitas && 
             product.details.salsas && 
             product.details.acompanantes;
    });
    
    if (hasAllInfo) {
      orderAnalysis.needsClarification = false;
      orderAnalysis.clarificationQuestions = [];
    }
  }

  // Obtener recomendaciones adicionales
  getAdditionalRecommendations(profile, branchId) {
    // Obtener productos del men√∫ cargado en la sucursal
    const menuProducts = this.getMenuProductsFromBranch(branchId);
    
    // Filtrar productos que no hayan sido recomendados anteriormente
    const allProducts = menuProducts.map(product => product.name);
    const additionalOptions = allProducts.slice(0, 5); // Tomar los primeros 5 productos del men√∫
    
    return `üçΩÔ∏è *M√ÅS OPCIONES PARA TI*

${additionalOptions.map((option, index) => `${index + 1}. ${option}`).join('\n')}

üí° *¬øTe gusta alguna de estas opciones?*
Responde con el n√∫mero de tu favorita.

üîÑ *¬øQuieres empezar de nuevo?*
Escribe "recomendaci√≥n" para hacer el test otra vez.`;
  }

  // Crear prompt mejorado para Hugging Face
  createEnhancedPrompt(context, userMessage, history) {
    let prompt = context + '\n\n';
    
    if (history && history.length > 0) {
      prompt += 'Historial de conversaci√≥n:\n';
      history.forEach(entry => {
        prompt += `Usuario: ${entry.user}\nAsistente: ${entry.assistant}\n\n`;
      });
    }
    
    prompt += `Usuario: ${userMessage}\nAsistente:`;
    
    return prompt;
  }

  // Obtener historial de conversaci√≥n
  getConversationHistory(clientId) {
    if (!clientId) return [];
    return this.conversationHistory.get(clientId) || [];
  }

  // Agregar al historial de conversaci√≥n
  addToConversationHistory(clientId, userMessage, aiResponse) {
    if (!clientId) return;
    
    let history = this.conversationHistory.get(clientId) || [];
    
    history.push({
      user: userMessage,
      assistant: aiResponse,
      timestamp: new Date()
    });
    
    // Mantener solo los √∫ltimos mensajes
    if (history.length > this.maxHistoryLength) {
      history = history.slice(-this.maxHistoryLength);
    }
    
    this.conversationHistory.set(clientId, history);
  }

  // Procesar pedidos espec√≠ficos de alitas con todos los detalles
  processAlitasOrder(message, lowerMessage, customPrompt) {
    console.log('üçó ===== PROCESANDO PEDIDO DE ALITAS =====');
    
    const order = {
      products: [],
      total: 0,
      hasProducts: false,
      needsClarification: false,
      clarificationQuestions: [],
      orderType: 'alitas'
    };

    // Detectar tipo de combo
    const comboPatterns = {
      personal: {
        'combo 1': { alitas: 5, price: 21900 },
        'combo 2': { alitas: 7, price: 26900 },
        'combo 3': { alitas: 9, price: 30900 },
        'combo 4': { alitas: 14, price: 42900 },
        '5 alitas': { alitas: 5, price: 21900 },
        '7 alitas': { alitas: 7, price: 26900 },
        '9 alitas': { alitas: 9, price: 30900 },
        '14 alitas': { alitas: 14, price: 42900 }
      },
      familiar: {
        'familiar 1': { alitas: 20, price: 65900 },
        'familiar 2': { alitas: 30, price: 62900 },
        'familiar 3': { alitas: 40, price: 87900 },
        'familiar 4': { alitas: 50, price: 107900 },
        '20 alitas': { alitas: 20, price: 65900 },
        '30 alitas': { alitas: 30, price: 62900 },
        '40 alitas': { alitas: 40, price: 87900 },
        '50 alitas': { alitas: 50, price: 107900 }
      },
      emparejado: {
        'combo emparejado': { alitas: 16, price: 123900 },
        '16 alitas': { alitas: 16, price: 123900 }
      }
    };

    // Detectar salsas
    const salsasTradicionales = ['bbq', 'miel mostaza', 'picante suave', 'picante full', 'envinada', 'frutos rojos', 'parmesano', 'maracuy√°', 'lim√≥n pimienta'];
    const salsasPremium = ['dulce ma√≠z', 'la original', 'cheddar', 'sour cream', 'pepinillo'];

    // Detectar acompa√±antes
    const acompanantes = ['papas criollas', 'cascos', 'yucas', 'arepitas', 'papas francesa', 'papas fritas'];

    // Detectar bebidas
    const bebidas = ['gaseosa', 'limonada', 'coca cola', 'pepsi'];

    // Detectar tipo de alitas
    const tipoAlitas = {
      ba√±adas: ['ba√±adas', 'con salsa', 'ba√±ada'],
      separadas: ['con salsa aparte', 'salsa aparte', 'separadas']
    };

    // Analizar el mensaje
    let detectedCombo = null;
    let detectedSalsas = [];
    let detectedAcompanantes = [];
    let detectedBebidas = [];
    let detectedTipoAlitas = null;

    // Detectar combo
    for (const [tipo, combos] of Object.entries(comboPatterns)) {
      for (const [comboName, comboInfo] of Object.entries(combos)) {
        // Crear patrones flexibles para detectar combos con o sin espacios
        const flexiblePatterns = [
          comboName, // "combo 2"
          comboName.replace(/\s+/g, ''), // "combo2"
          comboName.replace(/\s+/g, '\\s*') // "combo\\s*2" para regex
        ];
        
        let found = false;
        for (const pattern of flexiblePatterns) {
          if (lowerMessage.includes(pattern)) {
            detectedCombo = { tipo, comboName, ...comboInfo };
            found = true;
            break;
          }
        }
        if (found) break;
      }
      if (detectedCombo) break;
    }

    // Detectar salsas
    for (const salsa of salsasTradicionales) {
      if (lowerMessage.includes(salsa)) {
        detectedSalsas.push({ nombre: salsa, tipo: 'tradicional' });
      }
    }
    for (const salsa of salsasPremium) {
      if (lowerMessage.includes(salsa)) {
        detectedSalsas.push({ nombre: salsa, tipo: 'premium' });
      }
    }

    // Detectar acompa√±antes
    for (const acompanante of acompanantes) {
      if (lowerMessage.includes(acompanante)) {
        detectedAcompanantes.push(acompanante);
      }
    }

    // Detectar bebidas
    for (const bebida of bebidas) {
      if (lowerMessage.includes(bebida)) {
        detectedBebidas.push(bebida);
      }
    }

    // Detectar tipo de alitas
    for (const [tipo, keywords] of Object.entries(tipoAlitas)) {
      for (const keyword of keywords) {
        if (lowerMessage.includes(keyword)) {
          detectedTipoAlitas = tipo;
          break;
        }
      }
      if (detectedTipoAlitas) break;
    }

    // Si se detect√≥ un combo, procesar
    if (detectedCombo) {
      order.hasProducts = true;
      
      const product = {
        name: `Combo ${detectedCombo.comboName}`,
        quantity: 1,
        price: detectedCombo.price,
        total: detectedCombo.price,
        details: {
          alitas: detectedCombo.alitas,
          tipo: detectedCombo.tipo,
          salsas: detectedSalsas,
          acompanantes: detectedAcompanantes,
          bebidas: detectedBebidas,
          tipoAlitas: detectedTipoAlitas
        }
      };

      order.products.push(product);
      order.total += product.total;

      // Generar preguntas de clarificaci√≥n si faltan detalles
      if (!detectedTipoAlitas) {
        order.needsClarification = true;
        order.clarificationQuestions.push('¬øQuieres las alitas ba√±adas o con la salsa aparte?');
      }

      if (detectedSalsas.length === 0) {
        order.needsClarification = true;
        order.clarificationQuestions.push('¬øQu√© salsas prefieres? Tenemos tradicionales (BBQ, miel mostaza, picante) y premium (cheddar, sour cream).');
      }

      if (detectedAcompanantes.length === 0) {
        order.needsClarification = true;
        order.clarificationQuestions.push('¬øQu√© acompa√±ante prefieres? Papas criollas, cascos, yucas o arepitas.');
      }

      if (detectedCombo.tipo === 'familiar' && detectedBebidas.length === 0) {
        order.needsClarification = true;
        order.clarificationQuestions.push('¬øQu√© bebida prefieres? Incluye gaseosa de 1.5L.');
      }

      if (detectedCombo.tipo === 'emparejado' && detectedBebidas.length < 2) {
        order.needsClarification = true;
        order.clarificationQuestions.push('¬øQu√© bebidas prefieres? Incluye 2 limonadas.');
      }
    }

    console.log('üçó Pedido de alitas procesado:', order);
    return order;
  }

  // Procesar pedido autom√°ticamente con configuraci√≥n espec√≠fica de sucursal
  processOrder(message, branchId = null, customPrompt = null) {
    const lowerMessage = message.toLowerCase();
    
    console.log('üõí ===== PROCESANDO PEDIDO =====');
    console.log('üí¨ Mensaje original:', message);
    console.log('üîç Mensaje normalizado:', lowerMessage);
    console.log('üè™ Branch ID:', branchId);
    console.log('ü§ñ Custom Prompt:', customPrompt ? 'Disponible' : 'No disponible');
    console.log('================================');
    
    // Funci√≥n para normalizar texto (misma que en analyzeUserIntent)
    const normalizeText = (text) => {
      return text
        .replace(/√±/g, 'n')
        .replace(/√°/g, 'a')
        .replace(/√©/g, 'e')
        .replace(/√≠/g, 'i')
        .replace(/√≥/g, 'o')
        .replace(/√∫/g, 'u')
        .replace(/√º/g, 'u')
        .replace(/√ß/g, 'c')
        .replace(/[bcdfghjklmnpqrstvwxyz]{2,}/g, (match) => match[0])
        .replace(/[aeiou]{2,}/g, (match) => match[0])
        .replace(/[^a-z0-9\s]/g, '')
        .replace(/\s+/g, ' ')
        .trim();
    };

    // Funci√≥n para calcular distancia de Levenshtein (similitud entre strings)
    const levenshteinDistance = (str1, str2) => {
      const matrix = [];
      
      for (let i = 0; i <= str2.length; i++) {
        matrix[i] = [i];
      }
      
      for (let j = 0; j <= str1.length; j++) {
        matrix[0][j] = j;
      }
      
      for (let i = 1; i <= str2.length; i++) {
        for (let j = 1; j <= str1.length; j++) {
          if (str2.charAt(i - 1) === str1.charAt(j - 1)) {
            matrix[i][j] = matrix[i - 1][j - 1];
          } else {
            matrix[i][j] = Math.min(
              matrix[i - 1][j - 1] + 1,
              matrix[i][j - 1] + 1,
              matrix[i - 1][j] + 1
            );
          }
        }
      }
      
      return matrix[str2.length][str1.length];
    };

    // Funci√≥n para calcular similitud porcentual entre dos strings
    const calculateSimilarity = (str1, str2) => {
      const distance = levenshteinDistance(str1.toLowerCase(), str2.toLowerCase());
      const maxLength = Math.max(str1.length, str2.length);
      return maxLength === 0 ? 100 : ((maxLength - distance) / maxLength) * 100;
    };

    // Funci√≥n para encontrar productos similares
    const findSimilarProducts = (searchTerm, products, threshold = 60) => {
      const normalizedSearchTerm = normalizeText(searchTerm);
      const similarProducts = [];
      
      for (const [productName, productInfo] of Object.entries(products)) {
        const normalizedProductName = normalizeText(productName);
        
        // Calcular similitud con el nombre del producto
        const nameSimilarity = calculateSimilarity(normalizedSearchTerm, normalizedProductName);
        
        // Calcular similitud con aliases
        let maxAliasSimilarity = 0;
        if (productInfo.aliases) {
          for (const alias of productInfo.aliases) {
            const aliasSimilarity = calculateSimilarity(normalizedSearchTerm, normalizeText(alias));
            maxAliasSimilarity = Math.max(maxAliasSimilarity, aliasSimilarity);
          }
        }
        
        // Usar la mayor similitud encontrada
        const maxSimilarity = Math.max(nameSimilarity, maxAliasSimilarity);
        
        if (maxSimilarity >= threshold) {
          similarProducts.push({
            name: productName,
            info: productInfo,
            similarity: maxSimilarity,
            matchType: nameSimilarity >= maxAliasSimilarity ? 'name' : 'alias'
          });
        }
      }
      
      // Ordenar por similitud descendente
      return similarProducts.sort((a, b) => b.similarity - a.similarity);
    };

    // Procesar pedidos espec√≠ficos de alitas usando prompt personalizado
    if (customPrompt && customPrompt.toLowerCase().includes('alitas')) {
      return this.processAlitasOrder(message, lowerMessage, customPrompt);
    }

    // Funci√≥n mejorada para buscar productos con detecci√≥n inteligente
    const findProductIntelligent = (searchTerm, products) => {
      const normalizedSearchTerm = normalizeText(searchTerm);
      
      // 1. B√∫squeda exacta primero
      for (const [productName, productInfo] of Object.entries(products)) {
        const normalizedProductName = normalizeText(productName);
        
        if (normalizedSearchTerm.includes(normalizedProductName)) {
          return { 
            name: productName, 
            info: productInfo, 
            confidence: 100,
            matchType: 'exact'
          };
        }
        
        // Buscar en aliases
        if (productInfo.aliases) {
          for (const alias of productInfo.aliases) {
            const normalizedAlias = normalizeText(alias);
            if (normalizedSearchTerm.includes(normalizedAlias)) {
              return { 
                name: productName, 
                info: productInfo, 
                confidence: 95,
                matchType: 'alias'
              };
            }
          }
        }
      }
      
      // 2. B√∫squeda por similitud si no se encuentra exacto
      const similarProducts = findSimilarProducts(searchTerm, products, 40); // Reducir threshold m√°s
      
      if (similarProducts.length > 0) {
        const bestMatch = similarProducts[0];
        
        // Usar detecci√≥n inteligente si la similitud es razonable
        if (bestMatch.similarity >= 50) {
          return {
            name: bestMatch.name,
            info: bestMatch.info,
            confidence: bestMatch.similarity,
            matchType: 'similar',
            suggestions: similarProducts.slice(1, 3) // Top 2 alternativas
          };
        }
      }
      
      return null;
    };
    
    // Base de datos de productos con precios (mejorada con m√°s aliases)
    const products = {
      // Caf√©s
      'caf√© americano': { price: 3500, category: 'caf√©', aliases: ['americano', 'cafe americano', 'americano', 'americano'] },
      'americano': { price: 3500, category: 'caf√©', aliases: ['caf√© americano', 'cafe americano', 'americano'] },
      'cappuccino': { price: 4000, category: 'caf√©', aliases: ['capuchino', 'capuccino', 'capuchino', 'capuccino', 'capuchino', 'capuchino', 'capuccino'] },
      'capuchino': { price: 4000, category: 'caf√©', aliases: ['cappuccino', 'capuccino', 'capuchino'] },
      'capuccino': { price: 4000, category: 'caf√©', aliases: ['cappuccino', 'capuchino', 'capuccino'] },
      'caf√© latte': { price: 4200, category: 'caf√©', aliases: ['latte', 'cafe latte', 'latte'] },
      'latte': { price: 4200, category: 'caf√©', aliases: ['caf√© latte', 'cafe latte'] },
      'mocha': { price: 4800, category: 'caf√©', aliases: ['mocha', 'moca', 'moca'] },
      'frapp√© de vainilla': { price: 4800, category: 'caf√©', aliases: ['frappe vainilla', 'frapp√© vainilla', 'frappe vainilla', 'frappe vainilla', 'frappe vainilla', 'frappe vainilla'] },
      'frappe de vainilla': { price: 4800, category: 'caf√©', aliases: ['frapp√© de vainilla', 'frappe vainilla', 'frappe vainilla'] },
      'frapp√© de chocolate': { price: 5200, category: 'caf√©', aliases: ['frappe chocolate', 'frapp√© chocolate', 'frappe chocolate', 'frappe chocolate'] },
      'frappe de chocolate': { price: 5200, category: 'caf√©', aliases: ['frapp√© de chocolate', 'frappe chocolate', 'frappe chocolate'] },
      'arepa con huevo': { price: 6500, category: 'desayuno', aliases: ['arepa huevo', 'arepa'] },
      'calentado paisa': { price: 8000, category: 'desayuno', aliases: ['calentado', 'paisa'] },
      'caf√© helado': { price: 4500, category: 'caf√©', aliases: ['cafe helado', 'caf√© fr√≠o', 'cafe helado', 'cafe helado', 'cafe helado', 'cafe helado'] },
      'cafe helado': { price: 4500, category: 'caf√©', aliases: ['caf√© helado', 'cafe helado', 'cafe helado'] },
      
      // Pasteler√≠a
      'croissant simple': { price: 3000, category: 'pasteler√≠a', aliases: ['croissant', 'croissant b√°sico', 'croisant', 'croisant', 'croisant'] },
      'croissant': { price: 3000, category: 'pasteler√≠a', aliases: ['croissant simple', 'croisant', 'croisant'] },
      'croisant': { price: 3000, category: 'pasteler√≠a', aliases: ['croissant', 'croissant simple', 'croisant'] },
      'croissant con jam√≥n y queso': { price: 4500, category: 'pasteler√≠a', aliases: ['croissant jam√≥n queso', 'croissant jamon queso'] },
      'wrap de pollo': { price: 5500, category: 'comida', aliases: ['wrap pollo', 'wrap con pollo', 'wrap pollo'] },
      'muffin de ar√°ndanos': { price: 2500, category: 'pasteler√≠a', aliases: ['muffin ar√°ndanos', 'muffin arandanos'] },
      'muffin de chocolate': { price: 4000, category: 'pasteler√≠a', aliases: ['muffin chocolate'] },
      'muffin': { price: 2500, category: 'pasteler√≠a', aliases: ['muffin de ar√°ndanos'] },
      'brownie de chocolate': { price: 3200, category: 'pasteler√≠a', aliases: ['brownie', 'brownie chocolate'] },
      'brownie': { price: 3200, category: 'pasteler√≠a', aliases: ['brownie de chocolate'] },
      'cheesecake de fresa': { price: 4800, category: 'pasteler√≠a', aliases: ['cheesecake', 'cheesecake fresa'] },
      'tiramis√∫': { price: 5200, category: 'pasteler√≠a', aliases: ['tiramisu'] },
      'crepes de nutella': { price: 8500, category: 'postres', aliases: ['crepes nutella', 'crepe de nutella', 'crepe nutella'] },
      'flan de caramelo': { price: 5500, category: 'postres', aliases: ['flan', 'flan caramelo', 'flan de caramelo'] },
      
      // Bebidas
      'limonada de coco': { price: 4000, category: 'bebida', aliases: ['limonada coco', 'limonada con coco', 'limonada coco'] },
      'limonada natural': { price: 3500, category: 'bebida', aliases: ['limonada', 'limonada natural'] },
      
      // Productos adicionales del men√∫ real
      'torta de zanahoria': { price: 6000, category: 'postres', aliases: ['torta zanahoria', 'torta de zanahoria'] },
      'ensalada c√©sar': { price: 12000, category: 'almuerzos', aliases: ['ensalada cesar', 'cesar', 'ensalada cesar'] },
      'torta de chocolate': { price: 6500, category: 'postres', aliases: ['torta chocolate', 'torta de chocolate'] },
      'tiramisu': { price: 7500, category: 'postres', aliases: ['tiramisu', 'tiramis√∫'] },
      'sundae de chocolate': { price: 8000, category: 'postres', aliases: ['sundae chocolate', 'sundae de chocolate'] },
      'banana split': { price: 9500, category: 'postres', aliases: ['banana split', 'banana'] },
      'waffle con helado': { price: 10000, category: 'postres', aliases: ['waffle helado', 'waffle con helado'] },
      'smoothie de frutas': { price: 5000, category: 'bebida', aliases: ['smoothie', 'smoothie frutas'] },
      'jugo de naranja': { price: 3500, category: 'bebida', aliases: ['jugo naranja', 'naranja'] },
      'jugo de manzana': { price: 3500, category: 'bebida', aliases: ['jugo manzana', 'manzana'] },
      'agua': { price: 2000, category: 'bebida', aliases: ['agua natural'] },
      'gaseosa': { price: 3000, category: 'bebida', aliases: ['refresco', 'soda'] },
      
      // Desayunos
      'desayuno ejecutivo': { price: 12000, category: 'desayuno', aliases: ['desayuno ejecutivo', 'ejecutivo'] },
      'desayuno continental': { price: 8500, category: 'desayuno', aliases: ['desayuno continental', 'continental'] },
      'desayuno saludable': { price: 10000, category: 'desayuno', aliases: ['desayuno saludable', 'saludable'] },
      
      // T√©s e Infusiones (FALTANTES)
      't√© negro': { price: 2800, category: 't√©', aliases: ['te negro', 't√© negro', 'te negro'] },
      't√© verde': { price: 2800, category: 't√©', aliases: ['te verde', 't√© verde', 'te verde'] },
      't√© de hierbas': { price: 3000, category: 't√©', aliases: ['te hierbas', 't√© hierbas', 'te de hierbas'] },
      't√© de manzanilla': { price: 3000, category: 't√©', aliases: ['te manzanilla', 't√© manzanilla', 'te de manzanilla'] },
      't√© de jengibre': { price: 3200, category: 't√©', aliases: ['te jengibre', 't√© jengibre', 'te de jengibre'] },
      'chocolate caliente': { price: 4500, category: 'bebida caliente', aliases: ['chocolate', 'chocolate caliente'] },
      'arom√°tica de canela': { price: 3500, category: 'bebida caliente', aliases: ['arom√°tica canela', 'arom√°tica de canela'] },
      
      // Caf√©s (FALTANTES)
      'caf√© con leche': { price: 4000, category: 'caf√©', aliases: ['cafe con leche', 'caf√© con leche'] },
      'latte': { price: 4800, category: 'caf√©', aliases: ['latte', 'caf√© latte'] },
      'mocha': { price: 5200, category: 'caf√©', aliases: ['mocha', 'caf√© mocha'] },
      'macchiato': { price: 4700, category: 'caf√©', aliases: ['macchiato', 'caf√© macchiato'] },
      'caf√© descafeinado': { price: 3800, category: 'caf√©', aliases: ['cafe descafeinado', 'descafeinado'] },
      'espresso doble': { price: 4000, category: 'caf√©', aliases: ['espresso doble', 'doble espresso'] },
      
      // Bebidas Fr√≠as (FALTANTES)
      'caf√© helado': { price: 4000, category: 'caf√© fr√≠o', aliases: ['cafe helado', 'caf√© helado'] },
      'frapp√© de caf√©': { price: 5500, category: 'caf√© fr√≠o', aliases: ['frappe cafe', 'frapp√© cafe'] },
      'cold brew': { price: 4500, category: 'caf√© fr√≠o', aliases: ['cold brew', 'coldbrew'] },
      'iced latte': { price: 5000, category: 'caf√© fr√≠o', aliases: ['iced latte', 'latte helado'] },
      'frapp√© de mocha': { price: 6000, category: 'caf√© fr√≠o', aliases: ['frappe mocha', 'frapp√© mocha'] },
      
      // Jugos y Refrescos (FALTANTES)
      'jugo de naranja natural': { price: 4500, category: 'jugo', aliases: ['jugo naranja', 'naranja natural'] },
      'jugo de maracuy√°': { price: 4800, category: 'jugo', aliases: ['jugo maracuy√°', 'maracuy√°'] },
      'jugo de mango': { price: 4800, category: 'jugo', aliases: ['jugo mango', 'mango'] },
      'limonada natural': { price: 3500, category: 'bebida', aliases: ['limonada', 'limonada natural'] },
      'limonada de coco': { price: 4000, category: 'bebida', aliases: ['limonada coco', 'limonada de coco'] },
      'agua de panela': { price: 2500, category: 'bebida', aliases: ['agua panela', 'panela'] },
      'gaseosa': { price: 3000, category: 'bebida', aliases: ['refresco', 'soda'] },
      
      // Pasteler√≠a (FALTANTES)
      'croissant simple': { price: 3500, category: 'pasteler√≠a', aliases: ['croissant', 'croissant simple'] },
      'croissant con jam√≥n y queso': { price: 5500, category: 'pasteler√≠a', aliases: ['croissant jam√≥n queso', 'croissant jamon queso'] },
      'muffin de ar√°ndanos': { price: 4000, category: 'pasteler√≠a', aliases: ['muffin ar√°ndanos', 'muffin arandanos'] },
      'muffin de chocolate': { price: 4000, category: 'pasteler√≠a', aliases: ['muffin chocolate', 'muffin de chocolate'] },
      'donut glaseado': { price: 3000, category: 'pasteler√≠a', aliases: ['donut', 'donas', 'donut glaseado'] },
      'brownie': { price: 4500, category: 'pasteler√≠a', aliases: ['brownie', 'brownie chocolate'] },
      'cheesecake': { price: 6000, category: 'pasteler√≠a', aliases: ['cheesecake', 'cheesecake de fresa'] },
      
      // Sopas (FALTANTES)
      'sopa de pollo': { price: 8500, category: 'sopa', aliases: ['sopa pollo', 'crema pollo'] },
      'crema de espinacas': { price: 7500, category: 'sopa', aliases: ['crema espinacas', 'sopa espinacas'] },
      'sopa de lentejas': { price: 8000, category: 'sopa', aliases: ['sopa lentejas', 'lentejas'] },
      'sopa de verduras': { price: 7000, category: 'sopa', aliases: ['sopa verduras', 'verduras'] },
      
      // Platos Principales (FALTANTES)
      'ensalada c√©sar': { price: 12000, category: 'ensalada', aliases: ['ensalada cesar', 'cesar'] },
      'ensalada de pollo': { price: 13500, category: 'ensalada', aliases: ['ensalada pollo', 'pollo ensalada'] },
      'sandwich club': { price: 11000, category: 'sandwich', aliases: ['club sandwich', 'sandwich club'] },
      'hamburguesa cl√°sica': { price: 15000, category: 'hamburguesa', aliases: ['hamburguesa', 'hamburguesa clasica'] },
      'hamburguesa con queso': { price: 16500, category: 'hamburguesa', aliases: ['hamburguesa queso', 'hamburguesa con queso'] },
      'wrap de pollo': { price: 10500, category: 'wrap', aliases: ['wrap pollo', 'wrap con pollo'] },
      'wrap vegetariano': { price: 9500, category: 'wrap', aliases: ['wrap vegetal', 'wrap veggie'] },
      'pasta alfredo': { price: 14000, category: 'pasta', aliases: ['alfredo', 'pasta alfredo'] },
      'pasta bolognesa': { price: 15500, category: 'pasta', aliases: ['bolognesa', 'pasta bolognesa'] },
      
      // Acompa√±amientos (FALTANTES)
      'papas a la francesa': { price: 5500, category: 'acompa√±amiento', aliases: ['papas francesas', 'papas fritas'] },
      'papas r√∫sticas': { price: 6000, category: 'acompa√±amiento', aliases: ['papas rusticas', 'papas rusticas'] },
      'ensalada verde': { price: 4500, category: 'ensalada', aliases: ['ensalada verde', 'verde'] },
      'arroz blanco': { price: 3500, category: 'acompa√±amiento', aliases: ['arroz', 'arroz blanco'] },
      
      // Postres Caseros (FALTANTES)
      'torta de chocolate': { price: 6500, category: 'postres', aliases: ['torta chocolate', 'torta de chocolate'] },
      'torta de zanahoria': { price: 6000, category: 'postres', aliases: ['torta zanahoria', 'torta de zanahoria'] },
      'tiramisu': { price: 7500, category: 'postres', aliases: ['tiramisu', 'tiramis√∫'] },
      'flan de caramelo': { price: 5500, category: 'postres', aliases: ['flan', 'flan caramelo'] },
      'helado de vainilla': { price: 4000, category: 'helado', aliases: ['helado vainilla', 'vainilla'] },
      'helado de chocolate': { price: 4000, category: 'helado', aliases: ['helado chocolate', 'chocolate helado'] },
      'helado de fresa': { price: 4000, category: 'helado', aliases: ['helado fresa', 'fresa helado'] },
      
      // Postres Especiales (FALTANTES)
      'sundae de chocolate': { price: 8000, category: 'postres', aliases: ['sundae chocolate', 'sundae de chocolate'] },
      'banana split': { price: 9500, category: 'postres', aliases: ['banana split', 'banana'] },
      'waffle con helado': { price: 10000, category: 'postres', aliases: ['waffle helado', 'waffle con helado'] },
      'crepes de nutella': { price: 8500, category: 'postres', aliases: ['crepes nutella', 'crepe de nutella'] }
    };
    
    const detectedProducts = [];
    let subtotal = 0;
    
    // Funci√≥n para buscar productos con detecci√≥n inteligente de errores
    const findProduct = (searchTerm) => {
      return findProductIntelligent(searchTerm, products);
    };
    
    // Detectar desayunos completos primero
    if (lowerMessage.includes('desayuno empresarial') || 
        (lowerMessage.includes('cappuccino') && lowerMessage.includes('croissant') && 
         lowerMessage.includes('yogurt') && lowerMessage.includes('fruta'))) {
      detectedProducts.push({
        name: 'Desayuno Empresarial',
        quantity: 1,
        price: 12000,
        total: 12000,
        category: 'desayuno'
      });
      subtotal += 12000;
    } else if (lowerMessage.includes('desayuno ejecutivo') || 
               (lowerMessage.includes('caf√© americano') && lowerMessage.includes('sandwich') && 
                lowerMessage.includes('jugo'))) {
      detectedProducts.push({
        name: 'Desayuno Ejecutivo',
        quantity: 1,
        price: 8500,
        total: 8500,
        category: 'desayuno'
      });
      subtotal += 8500;
    } else if (lowerMessage.includes('desayuno express') || 
               (lowerMessage.includes('caf√©') && lowerMessage.includes('muffin') && 
                lowerMessage.includes('agua'))) {
      detectedProducts.push({
        name: 'Desayuno Express',
        quantity: 1,
        price: 6500,
        total: 6500,
        category: 'desayuno'
      });
      subtotal += 6500;
    } else if (lowerMessage.includes('desayuno') && 
               (lowerMessage.includes('caf√© americano') || lowerMessage.includes('cafe americano')) && 
               (lowerMessage.includes('sandwich') || lowerMessage.includes('sandwich mixto'))) {
      // Desayuno personalizado con caf√© americano + sandwich
      detectedProducts.push({
        name: 'Desayuno Personalizado',
        quantity: 1,
        price: 7000, // Caf√© americano ($3,500) + Sandwich mixto (~$3,500)
        total: 7000,
        category: 'desayuno'
      });
      subtotal += 7000;
    }
    
    // Dividir el mensaje en partes para buscar productos
    const messageParts = lowerMessage.split(/[,\s]+/);
    const processedParts = new Set(); // Para evitar duplicados
    
    // Buscar patrones de cantidad + producto
    const quantityPattern = /(\d+)\s+([^,\d]+)/g;
    let match;
    
    while ((match = quantityPattern.exec(lowerMessage)) !== null) {
      const quantity = parseInt(match[1]);
      const productText = match[2].trim();
      
      const product = findProduct(productText);
      if (product && !processedParts.has(productText)) {
        const totalPrice = product.info.price * quantity;
        subtotal += totalPrice;
        
        detectedProducts.push({
          name: product.name,
          quantity: quantity,
          price: product.info.price,
          total: totalPrice,
          category: product.info.category
        });
        
        processedParts.add(productText);
        
        // Logging mejorado para mostrar tipo de detecci√≥n
        let detectionInfo = '';
        if (product.confidence === 100) {
          detectionInfo = '‚úÖ Detecci√≥n exacta';
        } else if (product.confidence >= 95) {
          detectionInfo = 'üéØ Detecci√≥n por alias';
        } else if (product.confidence >= 70) {
          detectionInfo = `üîç Detecci√≥n inteligente (${Math.round(product.confidence)}% similitud)`;
        }
        
        console.log(`${detectionInfo}: ${product.name} - $${product.info.price}`);
        
        // Mostrar sugerencias si es detecci√≥n inteligente
        if (product.suggestions && product.suggestions.length > 0) {
          console.log(`   üí° Alternativas encontradas: ${product.suggestions.map(s => s.name).join(', ')}`);
        }
      }
    }
    
    // Buscar productos sin cantidad espec√≠fica (cantidad = 1)
    // Usar una b√∫squeda m√°s precisa basada en el mensaje completo
    
    // Buscar productos espec√≠ficos en el mensaje completo
    // Ordenar por longitud (m√°s espec√≠ficos primero) para evitar coincidencias parciales
    const sortedProducts = Object.entries(products).sort((a, b) => b[0].length - a[0].length);
    
    for (const [productName, productInfo] of sortedProducts) {
      if (lowerMessage.includes(productName) && !processedParts.has(productName)) {
        // Verificar que no sea un subproducto de algo ya procesado
        let isSubProduct = false;
        for (const processedPart of processedParts) {
          if (processedPart.includes(productName) && processedPart !== productName) {
            isSubProduct = true;
            break;
          }
        }
        
        // Verificar que no haya sido procesado con cantidad espec√≠fica
        let alreadyProcessed = false;
        for (const detectedProduct of detectedProducts) {
          if (detectedProduct.name === productName) {
            alreadyProcessed = true;
            break;
          }
        }
        
        // Verificar que no haya sido procesado con cantidad espec√≠fica usando processedParts
        if (processedParts.has(productName)) {
          alreadyProcessed = true;
        }
        
        if (!isSubProduct && !alreadyProcessed) {
        const totalPrice = productInfo.price;
        subtotal += totalPrice;
        
        detectedProducts.push({
          name: productName,
          quantity: 1,
          price: productInfo.price,
          total: totalPrice,
          category: productInfo.category
        });
        
        processedParts.add(productName);
          console.log(`‚úÖ Producto detectado: ${productName} - $${productInfo.price}`);
        }
      }
    }
    
    // B√∫squeda adicional usando findProduct para aliases cortos (deshabilitada temporalmente)
    // const messageWords = lowerMessage.split(/[,\s]+/).filter(part => part.length > 2);
    
    // for (const word of messageWords) {
    //   if (!processedParts.has(word)) {
    //     const product = findProduct(word);
    //     if (product) {
    //       const totalPrice = product.info.price;
    //       subtotal += totalPrice;
          
    //       detectedProducts.push({
    //         name: product.name,
    //         quantity: 1,
    //         price: product.info.price,
    //         total: totalPrice,
    //         category: product.info.category
    //       });
          
    //       processedParts.add(word);
    //       console.log(`‚úÖ Producto detectado por alias: ${product.name} - $${product.info.price}`);
    //     }
    //   }
    // }
    
    // Calcular delivery (gratis para pedidos > $20,000)
    const deliveryFee = subtotal < 20000 ? 3000 : 0;
    const total = subtotal + deliveryFee;
    
    console.log(`üí∞ Subtotal: $${subtotal.toLocaleString()}`);
    console.log(`üöö Delivery: $${deliveryFee.toLocaleString()}`);
    console.log(`üíµ Total: $${total.toLocaleString()}`);
    
    return {
      products: detectedProducts,
      subtotal: subtotal,
      delivery: deliveryFee > 0,
      deliveryFee: deliveryFee,
      total: total,
      hasProducts: detectedProducts.length > 0
    };
  }
  
  // Generar respuesta de pedido
  generateOrderResponse(orderAnalysis) {
    if (!orderAnalysis.hasProducts) {
      return `No pude identificar productos espec√≠ficos en tu pedido. ¬øPodr√≠as ser m√°s espec√≠fico? Por ejemplo: "quiero 2 caf√©s americanos"`;
    }
    
    // Si necesita clarificaci√≥n (espec√≠fico para alitas)
    if (orderAnalysis.needsClarification && orderAnalysis.orderType === 'alitas') {
      let response = `üçó *PEDIDO DE ALITAS DETECTADO*\n\n`;
      
      orderAnalysis.products.forEach((product, index) => {
        response += `${index + 1}. ${product.name} - $${product.total.toLocaleString()}\n`;
        if (product.details) {
          response += `   üìã Detalles:\n`;
          if (product.details.alitas) response += `   ‚Ä¢ ${product.details.alitas} alitas\n`;
          if (product.details.salsas && product.details.salsas.length > 0) {
            response += `   ‚Ä¢ Salsas: ${product.details.salsas.map(s => s.nombre).join(', ')}\n`;
          }
          if (product.details.acompanantes && product.details.acompanantes.length > 0) {
            response += `   ‚Ä¢ Acompa√±antes: ${product.details.acompanantes.join(', ')}\n`;
          }
          if (product.details.bebidas && product.details.bebidas.length > 0) {
            response += `   ‚Ä¢ Bebidas: ${product.details.bebidas.join(', ')}\n`;
          }
          if (product.details.tipoAlitas) {
            response += `   ‚Ä¢ Tipo: ${product.details.tipoAlitas}\n`;
          }
        }
      });
      
      response += `\nüí∞ *TOTAL: $${orderAnalysis.total.toLocaleString()}*\n\n`;
      response += `‚ùì *NECESITO ALGUNOS DETALLES M√ÅS:*\n\n`;
      
      orderAnalysis.clarificationQuestions.forEach((question, index) => {
        response += `${index + 1}. ${question}\n`;
      });
      
      response += `\nPor favor responde cada pregunta para completar tu pedido.`;
      
      return response;
    }
    
    let response = `üõí *RESUMEN DE TU PEDIDO*\n\n`;
    
    orderAnalysis.products.forEach((product, index) => {
      response += `${index + 1}. ${product.name} x${product.quantity} - $${product.total.toLocaleString()}\n`;
    });
    
    response += `\nüí∞ *TOTALES*\n`;
    response += `Subtotal: $${(orderAnalysis.subtotal || orderAnalysis.total || 0).toLocaleString()}\n`;
    
    if (orderAnalysis.delivery) {
      response += `Delivery: $${(orderAnalysis.deliveryFee || 0).toLocaleString()}\n`;
    } else {
      response += `Delivery: ¬°Gratis! (pedido > $20,000)\n`;
    }
    
    response += `**Total: $${orderAnalysis.total.toLocaleString()}**\n\n`;
    
    if (orderAnalysis.total >= 20000) {
      response += `üéâ ¬°Tu pedido califica para delivery gratis!\n\n`;
    }
    
    response += `¬øConfirmas este pedido?`;
    
    return response;
  }

  // Guardar mensaje en historial de conversaci√≥n
  async saveConversationMessage(clientId, branchId, userMessage, intent) {
    try {
      const mongoose = require('mongoose');
      const db = mongoose.connection.db;
      
      await db.collection('conversations').updateOne(
        { 
          clientId: clientId,
          branchId: branchId 
        },
        { 
          $push: { 
            messages: {
              user: userMessage,
              timestamp: new Date(),
              intent: intent
            }
          },
          $set: {
            lastActivity: new Date(),
            updatedAt: new Date()
          }
        },
        { 
          upsert: true 
        }
      );
      
      this.logger.info(`üí¨ Mensaje guardado en historial para cliente ${clientId}`);
    } catch (error) {
      this.logger.error('Error guardando mensaje en historial:', error);
    }
  }

  // Guardar pedido en historial
  async saveOrderToHistory(clientId, branchId, orderAnalysis) {
    try {
      const mongoose = require('mongoose');
      const db = mongoose.connection.db;
      
      await db.collection('conversations').updateOne(
        { 
          clientId: clientId,
          branchId: branchId 
        },
        { 
          $push: { 
            orders: {
              products: orderAnalysis.products,
              subtotal: orderAnalysis.subtotal,
              delivery: orderAnalysis.delivery,
              deliveryFee: orderAnalysis.deliveryFee,
              total: orderAnalysis.total,
              timestamp: new Date()
            }
          },
          $set: {
            lastOrder: orderAnalysis,
            lastActivity: new Date(),
            updatedAt: new Date()
          }
        },
        { 
          upsert: true 
        }
      );
      
      this.logger.info(`üõí Pedido guardado en historial para cliente ${clientId}`);
    } catch (error) {
      this.logger.error('Error guardando pedido en historial:', error);
    }
  }

  // Obtener √∫ltimo pedido del cliente
  async getLastOrder(clientId, branchId) {
    try {
      const mongoose = require('mongoose');
      const db = mongoose.connection.db;
      
      const conversation = await db.collection('conversations').findOne({
        clientId: clientId,
        branchId: branchId
      });
      
      return conversation ? conversation.lastOrder : null;
    } catch (error) {
      this.logger.error('Error obteniendo √∫ltimo pedido:', error);
      return null;
    }
  }

  // Obtener historial de conversaci√≥n
  async getConversationHistory(clientId, branchId, limit = 5) {
    try {
      const mongoose = require('mongoose');
      const db = mongoose.connection.db;
      
      const conversation = await db.collection('conversations').findOne({
        clientId: clientId,
        branchId: branchId
      });
      
      if (conversation && conversation.messages) {
        return conversation.messages.slice(-limit);
      }
      
      return [];
    } catch (error) {
      this.logger.error('Error obteniendo historial de conversaci√≥n:', error);
      return [];
    }
  }

  // Manejar modificaci√≥n de pedido
  handleOrderModification(userMessage, previousOrder) {
    const lowerMessage = userMessage.toLowerCase();
    
    // Detectar qu√© quiere agregar
    const newProducts = this.processOrder(userMessage);
    
    if (newProducts.hasProducts) {
      // Combinar pedido anterior con nuevo
      const combinedProducts = [...previousOrder.products, ...newProducts.products];
      let subtotal = 0;
      
      combinedProducts.forEach(product => {
        subtotal += product.total;
      });
      
      const deliveryFee = subtotal < 20000 ? 3000 : 0;
      const total = subtotal + deliveryFee;
      
      const modifiedOrder = {
        products: combinedProducts,
        subtotal: subtotal,
        delivery: deliveryFee > 0,
        deliveryFee: deliveryFee,
        total: total,
        hasProducts: true
      };
      
      return this.generateOrderResponse(modifiedOrder);
    }
    
    return `No pude identificar qu√© producto quieres agregar. ¬øPodr√≠as ser m√°s espec√≠fico?`;
  }

  // Respuesta de fallback
  getFallbackResponse(userMessage, businessType) {
    const lowerMessage = userMessage.toLowerCase();
    
    if (lowerMessage.includes('hola') || lowerMessage.includes('buenos') || lowerMessage.includes('buenas')) {
      return `¬°Hola! üòä ¬øC√≥mo est√°s? ¬øEn qu√© puedo ayudarte hoy?`;
    }
    
    return `Gracias por contactarnos. ¬øEn qu√© puedo ayudarte?`;
  }

  // ===== SISTEMA DE CONTEXTO AVANZADO =====
  
  // Cargar configuraci√≥n de una sucursal desde la base de datos
  async loadBranchConfig(branchId) {
    try {
      const mongoose = require('mongoose');
      const BranchAIConfig = require('../models/BranchAIConfig');
      
      const config = await BranchAIConfig.findOne({ branchId });
      
      if (config) {
        if (config.menuContent) {
          this.setMenuContent(branchId, config.menuContent);
          console.log(`‚úÖ Men√∫ cargado autom√°ticamente para: ${branchId}`);
        }
        
        if (config.customPrompt) {
          this.setAIPrompt(branchId, config.customPrompt);
          console.log(`‚úÖ Prompt cargado autom√°ticamente para: ${branchId}`);
        }
        
        return true;
      } else {
        console.log(`‚ö†Ô∏è No se encontr√≥ configuraci√≥n para: ${branchId}`);
        return false;
      }
    } catch (error) {
      console.error(`‚ùå Error cargando configuraci√≥n para ${branchId}:`, error.message);
      return false;
    }
  }
  
  // Obtener contexto avanzado del cliente
  async getAdvancedClientContext(clientId, branchId) {
    try {
      const mongoose = require('mongoose');
      const db = mongoose.connection.db;
      const contextCollection = db.collection('advanced_context');
      
      const context = await contextCollection.findOne({ 
        clientId: clientId, 
        branchId: branchId 
      });
      
      return context || {
        clientId: clientId,
        branchId: branchId,
        preferences: {
          favoriteProducts: [],
          favoriteCategories: [],
          dietaryRestrictions: [],
          priceRange: 'medium'
        },
        orderHistory: [],
        lastOrder: null,
        conversationHistory: [],
        recommendations: [],
        lastActivity: new Date()
      };
    } catch (error) {
      console.error('Error obteniendo contexto avanzado:', error);
      return null;
    }
  }
  
  // Actualizar contexto avanzado del cliente
  async updateAdvancedClientContext(clientId, branchId, message, response, intent) {
    try {
      const mongoose = require('mongoose');
      const db = mongoose.connection.db;
      const contextCollection = db.collection('advanced_context');
      
      // Obtener contexto actual
      let context = await this.getAdvancedClientContext(clientId, branchId);
      
      if (!context) {
        context = {
          clientId: clientId,
          branchId: branchId,
          preferences: {
            favoriteProducts: [],
            favoriteCategories: [],
            dietaryRestrictions: [],
            priceRange: 'medium'
          },
          orderHistory: [],
          lastOrder: null,
          conversationHistory: [],
          recommendations: [],
          lastActivity: new Date(),
          createdAt: new Date(),
          updatedAt: new Date()
        };
      }
      
      // Actualizar √∫ltima actividad
      context.lastActivity = new Date();
      context.updatedAt = new Date();
      
      // Agregar mensaje al historial
      context.conversationHistory.push({
        message: message,
        response: response,
        timestamp: new Date(),
        intent: intent
      });
      
      // Limitar historial a √∫ltimos 50 mensajes
      if (context.conversationHistory.length > 50) {
        context.conversationHistory = context.conversationHistory.slice(-50);
      }
      
      // Procesar preferencias del mensaje
      const preferences = this.extractPreferences(message);
      if (preferences.products.length > 0) {
        preferences.products.forEach(product => {
          if (!context.preferences.favoriteProducts.includes(product)) {
            context.preferences.favoriteProducts.push(product);
          }
        });
      }
      
      if (preferences.categories.length > 0) {
        preferences.categories.forEach(category => {
          if (!context.preferences.favoriteCategories.includes(category)) {
            context.preferences.favoriteCategories.push(category);
          }
        });
      }
      
      // Procesar pedidos
      const orderAnalysis = this.processOrder(message);
      if (orderAnalysis.hasProducts) {
        context.orderHistory.push({
          products: orderAnalysis.products,
          total: orderAnalysis.total,
          timestamp: new Date()
        });
        
        context.lastOrder = {
          products: orderAnalysis.products,
          total: orderAnalysis.total,
          timestamp: new Date()
        };
        
        // Limitar historial a √∫ltimos 20 pedidos
        if (context.orderHistory.length > 20) {
          context.orderHistory = context.orderHistory.slice(-20);
        }
      }
      
      // Generar recomendaciones
      context.recommendations = this.generatePersonalizedRecommendations(context);
      
      // Guardar contexto actualizado
      await contextCollection.replaceOne(
        { clientId: clientId, branchId: branchId },
        context,
        { upsert: true }
      );
      
      return context;
    } catch (error) {
      console.error('Error actualizando contexto avanzado:', error);
      return null;
    }
  }
  
  // Extraer preferencias del mensaje
  extractPreferences(message) {
    const lowerMessage = message.toLowerCase();
    const preferences = {
      products: [],
      categories: []
    };
    
    // Productos favoritos
    const favoriteProducts = [
      'cappuccino', 'latte', 'americano', 'mocha', 'frapp√©',
      'muffin', 'croissant', 'brownie', 'cheesecake',
      'jugo', 'smoothie', 'limonada'
    ];
    
    favoriteProducts.forEach(product => {
      if (lowerMessage.includes(product)) {
        preferences.products.push(product);
      }
    });
    
    // Categor√≠as favoritas
    const categories = ['caf√©', 'pasteler√≠a', 'bebida', 'desayuno'];
    categories.forEach(category => {
      if (lowerMessage.includes(category)) {
        preferences.categories.push(category);
      }
    });
    
    return preferences;
  }
  
  // Generar recomendaciones personalizadas
  generatePersonalizedRecommendations(context) {
    const recommendations = [];
    
    if (!context) return recommendations;
    
    // Recomendaciones basadas en productos favoritos
    if (context.preferences.favoriteProducts.includes('cappuccino')) {
      recommendations.push({
        type: 'product',
        suggestion: 'frapp√© de vainilla',
        reason: 'Te gusta el cappuccino, podr√≠as disfrutar nuestro frapp√© de vainilla',
        price: 4800
      });
    }
    
    if (context.preferences.favoriteProducts.includes('muffin')) {
      recommendations.push({
        type: 'product',
        suggestion: 'brownie de chocolate',
        reason: 'Te gustan los muffins, prueba nuestro brownie de chocolate',
        price: 3200
      });
    }
    
    // Recomendaciones basadas en historial
    if (context.orderHistory.length > 0) {
      const lastOrder = context.orderHistory[context.orderHistory.length - 1];
      if (lastOrder.total < 15000) {
        recommendations.push({
          type: 'upsell',
          suggestion: 'desayuno ejecutivo',
          reason: 'Tu √∫ltimo pedido fue peque√±o, considera nuestro desayuno ejecutivo',
          price: 8500
        });
      }
    }
    
    // Recomendaciones basadas en patrones
    if (context.conversationHistory.length > 5) {
      const morningOrders = context.conversationHistory.filter(msg => 
        msg.timestamp.getHours() < 12 && msg.intent === 'hacer_pedido'
      ).length;
      
      if (morningOrders > 2) {
        recommendations.push({
          type: 'pattern',
          suggestion: 'desayuno express',
          reason: 'Veo que pediste varias veces en la ma√±ana, prueba nuestro desayuno express',
          price: 6500
        });
      }
    }
    
    return recommendations;
  }
  
  // Generar respuesta con recomendaciones personalizadas
  generatePersonalizedResponse(context, baseResponse) {
    if (!context || !context.recommendations || context.recommendations.length === 0) {
      return baseResponse;
    }
    
    let personalizedResponse = baseResponse;
    
    // Agregar recomendaciones si el usuario pregunta por sugerencias
    if (baseResponse.includes('recomendar') || baseResponse.includes('sugerir')) {
      personalizedResponse += '\n\nüéØ *RECOMENDACIONES PERSONALIZADAS*\n';
      
      context.recommendations.slice(0, 3).forEach((rec, index) => {
        personalizedResponse += `${index + 1}. ${rec.suggestion} - $${rec.price.toLocaleString()}\n`;
        personalizedResponse += `   ${rec.reason}\n\n`;
      });
    }
    
    return personalizedResponse;
  }

  // Detectar si es confirmaci√≥n de pedido
  isOrderConfirmation(message) {
    const confirmationKeywords = [
      's√≠', 'si', 'confirmo', 'confirmar', 'ok', 'perfecto', 'dale',
      'est√° bien', 'correcto', 'procede', 'adelante', 'yes',
      'acepto', 'aceptar', 'lo confirmo', 'confirmado', 'listo', 'vale', 'de una', 'h√°gale', 'hagale'
    ];
    
    const lowerMessage = message.toLowerCase().trim();
    return confirmationKeywords.some(keyword => lowerMessage.includes(keyword));
  }

  // Detectar si el usuario est√° pidiendo/proponiendo enviar datos de env√≠o
  isDeliveryDataRequest(message) {
    const lower = message.toLowerCase();
    const keywords = [
      'datos de env√≠o', 'datos para el env√≠o', 'mis datos', 'mis datos para el env√≠o',
      'direcci√≥n', 'direccion', 'tel√©fono', 'telefono', 'quien recibe', 'persona que recibe',
      'enviar direccion', 'enviar direcci√≥n', 'enviar datos', 'requiere mis datos', 'requieren mis datos'
    ];
    return keywords.some(k => lower.includes(k));
  }

  // Manejar confirmaci√≥n de pedido
  async handleOrderConfirmation(clientId, branchId, message) {
    try {
      // Obtener el √∫ltimo pedido pendiente del cliente
      const lastOrder = await this.getLastPendingOrder(clientId, branchId);
      
      if (!lastOrder) {
        return 'No tengo ning√∫n pedido pendiente para confirmar. ¬øQuieres hacer un nuevo pedido?';
      }

      // Si a√∫n no se defini√≥ el tipo de entrega, preguntar al cliente
      const hasType = lastOrder.delivery && lastOrder.delivery.type;
      if (!hasType) {
        await this.savePendingOrder(clientId, branchId, lastOrder);
        if (!this._awaitingDeliveryChoice) this._awaitingDeliveryChoice = new Map();
        this._awaitingDeliveryChoice.set(`${clientId}::${branchId}`, true);
        return '¬øQuieres domicilio o recoger en tienda? Responde con "domicilio" o "recoger".';
      }

      // Verificar si es para domicilio
      const isDelivery = lastOrder.delivery && lastOrder.delivery.type === 'delivery';
      if (isDelivery) {
        return await this.requestDeliveryData(clientId, branchId, lastOrder);
      } else {
        return await this.confirmOrderDirectly(clientId, branchId, lastOrder);
      }
      
    } catch (error) {
      console.error('Error manejando confirmaci√≥n de pedido:', error);
      return 'Hubo un problema procesando tu confirmaci√≥n. ¬øPuedes intentar de nuevo?';
    }
  }

  // Manejar elecci√≥n de entrega (domicilio o recoger)
  async handleDeliveryChoice(clientId, branchId, message, order) {
    const msg = message.toLowerCase();
    const key = `${clientId}::${branchId}`;
    // Aceptar variantes y errores comunes: domicilio/domisi(l)io, recoger/recojer/recojo, etc.
    const saysDelivery = /(domicilio|domisilio|domicillio|domicillio|a domicilio|a domisilio|enviar|env[√≠i]o|envio|delivery)/i.test(msg);
    const saysPickup = /(recoger|recojer|recojo|recogo|recogida|para recoger|para recojer|pickup|voy por|paso por|retirar|retiro|lo recojo)/i.test(msg);

    if (!saysDelivery && !saysPickup) {
      return null;
    }

    // Ya no estamos esperando elecci√≥n
    if (this._awaitingDeliveryChoice) this._awaitingDeliveryChoice.delete(key);

    if (saysDelivery) {
      const fee = typeof order.deliveryFee === 'number' ? order.deliveryFee : 3000;
      const updated = {
        ...order,
        delivery: { type: 'delivery', fee },
        total: (typeof order.subtotal === 'number' ? order.subtotal : order.total - (order.deliveryFee || 0)) + fee
      };
      await this.savePendingOrder(clientId, branchId, updated);
      return await this.requestDeliveryData(clientId, branchId, updated);
    }

    if (saysPickup) {
      const updated = {
        ...order,
        delivery: { type: 'pickup', fee: 0 },
        total: typeof order.subtotal === 'number' ? order.subtotal : order.total
      };
      await this.savePendingOrder(clientId, branchId, updated);
      return await this.confirmOrderDirectly(clientId, branchId, updated);
    }

    return null;
  }

  // Solicitar datos de env√≠o para domicilio
  async requestDeliveryData(clientId, branchId, order) {
    // Guardar el pedido temporalmente para solicitar datos
    await this.savePendingOrder(clientId, branchId, order);
    
    return `üöö *DATOS DE ENV√çO REQUERIDOS*

Para procesar tu pedido a domicilio, necesito:

üìç *Direcci√≥n completa:*
üè† *Barrio/Zona:*
üìû *Tel√©fono de contacto:*
üë§ *Nombre de quien recibe:*

Por favor env√≠a todos los datos en un solo mensaje, por ejemplo:
"Calle 123 #45-67, Barrio Centro, 3001234567, Mar√≠a Gonz√°lez"

¬øCu√°les son tus datos de env√≠o?`;
  }

  // Intentar procesar datos de env√≠o proporcionados en texto libre
  async tryHandleDeliveryData(clientId, branchId, message, order) {
    const text = message.trim();
    // Heur√≠stica simple: buscar tel√©fono como d√≠gitos 7-12, separar por comas
    const phoneMatch = text.match(/(\+?\d[\d\s-]{6,14}\d)/);
    const parts = text.split(/[,\n]/).map(s => s.trim()).filter(Boolean);
    if (!phoneMatch || parts.length < 2) {
      return null; // no parece datos completos
    }

    // Asignaci√≥n tentativa: direcci√≥n = primera parte, barrio/extra = segunda si existe, nombre = √∫ltima parte
    const addressLine = parts[0];
    const neighborhood = parts.length >= 3 ? parts[1] : '';
    const phone = phoneMatch[1].replace(/[^\d]/g, '');
    const recipient = parts[parts.length - 1];

    const updated = {
      ...order,
      delivery: {
        type: 'delivery',
        fee: typeof order.deliveryFee === 'number' ? order.deliveryFee : (order.delivery?.fee ?? 3000),
        address: {
          street: `${addressLine}${neighborhood ? `, ${neighborhood}` : ''}`,
          city: undefined,
          state: undefined,
          zipCode: undefined
        }
      },
      customer: {
        ...(order.customer || {}),
        phone,
        name: recipient || 'Cliente WhatsApp'
      }
    };

    await this.savePendingOrder(clientId, branchId, updated);

    // Guardar pedido en BD
    const saved = await this.saveOrderToDatabase(clientId, branchId, updated);

    const etaMin = 25 + Math.floor(Math.random() * 11); // 25-35
    return `‚úÖ *PEDIDO CONFIRMADO*

üÜî *N√∫mero de pedido:* ${saved.orderId}
üìç *Entrega:* A domicilio
üì¶ *Direcci√≥n:* ${updated.delivery.address.street}
üìû *Contacto:* ${phone}
üë§ *Recibe:* ${recipient}
üí∞ *Total:* $${updated.total.toLocaleString()}
‚è∞ *Tiempo estimado:* ${etaMin} minutos

¬°Gracias por tu pedido! Tu domicilio va en camino. Fue un gusto atenderte, espero poder ayudarte de nuevo pronto.`;
  }

  // Confirmar pedido directamente (para recoger)
  async confirmOrderDirectly(clientId, branchId, order) {
    try {
      // Crear el pedido en la base de datos
      const savedOrder = await this.saveOrderToDatabase(clientId, branchId, order);
      
      return `‚úÖ *PEDIDO CONFIRMADO*

üÜî *N√∫mero de pedido:* ${savedOrder.orderId}
üìã *Resumen:* ${order.products.map(p => `${p.name} x${p.quantity}`).join(', ')}
üí∞ *Total:* $${order.total.toLocaleString()}
‚è∞ *Tiempo estimado:* 15-20 minutos

üìû *Tel√©fono:* ${clientId}
üè™ *Sucursal:* Centro

¬°Gracias por tu pedido! Te notificaremos cuando est√© listo para recoger.`;
      
    } catch (error) {
      console.error('Error confirmando pedido:', error);
      return 'Hubo un problema guardando tu pedido. ¬øPuedes intentar de nuevo?';
    }
  }

  // Obtener √∫ltimo pedido pendiente
  async getLastPendingOrder(clientId, branchId) {
    const key = `${clientId}::${branchId}`;
    if (this._pendingOrders && this._pendingOrders.has(key)) {
      return this._pendingOrders.get(key);
    }
    return null;
  }

  // Guardar pedido pendiente temporalmente
  async savePendingOrder(clientId, branchId, order) {
    if (!this._pendingOrders) {
      this._pendingOrders = new Map();
    }
    const key = `${clientId}::${branchId}`;
    this._pendingOrders.set(key, { ...order, savedAt: Date.now() });
    console.log('üíæ Guardando pedido pendiente:', { key, items: order.products?.length || 0, total: order.total });
  }

  // Guardar pedido en base de datos
  async saveOrderToDatabase(clientId, branchId, order) {
    const Order = require('../models/Order');
    const Branch = require('../models/Branch');
    
    // Obtener businessId desde branchId (aceptar ObjectId o branchId string)
    let branch = null;
    try {
      branch = await Branch.findById(branchId);
    } catch (e) {
      branch = null;
    }
    if (!branch) {
      branch = await Branch.findOne({ branchId: branchId });
    }
    if (!branch) {
      throw new Error('Sucursal no encontrada');
    }
    
    // Generar ID √∫nico para el pedido
    const orderId = `ORD${Date.now()}${Math.random().toString(36).substr(2, 4).toUpperCase()}`;
    
    // Crear objeto del pedido
    const orderData = {
      orderId,
      businessId: (branch.businessId && branch.businessId.toString) ? branch.businessId.toString() : String(branch.businessId || ''),
      branchId: (branch._id && branch._id.toString) ? branch._id.toString() : String(branchId),
      customer: {
        phone: clientId,
        name: 'Cliente WhatsApp'
      },
      items: order.products.map(product => ({
        name: product.name,
        quantity: product.quantity,
        unitPrice: product.price,
        totalPrice: product.total,
        serviceId: `SVC${Date.now()}${Math.random().toString(36).substr(2, 3).toUpperCase()}`
      })),
      delivery: {
        type: (order.delivery && order.delivery.type) ? order.delivery.type : 'pickup',
        fee: (order.delivery && typeof order.delivery.fee === 'number') ? order.delivery.fee : 0,
        address: (order.delivery && order.delivery.address) ? order.delivery.address : null
      },
      subtotal: order.subtotal || order.total || 0,
      total: order.total,
      status: 'confirmed',
      source: 'whatsapp',
      whatsappMessageId: `msg_${Date.now()}`
    };

    // Guardar en base de datos
    const savedOrder = new Order(orderData);
    await savedOrder.save();
    
    console.log('‚úÖ Pedido guardado en BD:', savedOrder.orderId);
    return savedOrder;
  }

  // Manejar respuestas a preguntas de clarificaci√≥n
  async handleClarificationResponse(clientId, branchId, userMessage, pendingOrder) {
    try {
      const lowerMessage = userMessage.toLowerCase();
      
      // Obtener el customPrompt para procesar la respuesta
      const customPrompt = this.aiPrompts.get(branchId) || null;
      
      // Procesar la respuesta del usuario con el pedido existente
      const updatedOrder = await this.processOrderWithClarification(userMessage, branchId, customPrompt, pendingOrder);
      
      if (updatedOrder.hasProducts && !updatedOrder.needsClarification) {
        // El pedido est√° completo, mostrar resumen final
        await this.savePendingOrder(clientId, branchId, updatedOrder);
        const orderResponse = this.generateOrderResponse(updatedOrder);
        return orderResponse;
      } else if (updatedOrder.needsClarification) {
        // A√∫n necesita m√°s informaci√≥n
        await this.savePendingOrder(clientId, branchId, updatedOrder);
        const clarificationResponse = this.generateClarificationResponse(updatedOrder);
        return clarificationResponse;
      }
      
      return null; // No se pudo procesar la respuesta
    } catch (error) {
      console.error('Error procesando respuesta de clarificaci√≥n:', error);
      return null;
    }
  }

  // Procesar pedido con informaci√≥n de clarificaci√≥n adicional
  async processOrderWithClarification(userMessage, branchId, customPrompt, existingOrder) {
    // Usar el an√°lisis existente como base
    const orderAnalysis = { ...existingOrder };
    
    // Procesar la nueva informaci√≥n del usuario
    const lowerMessage = userMessage.toLowerCase();
    
    // Detectar tipo de alitas (ba√±adas o salsa aparte)
    if (lowerMessage.includes('ba√±adas') || lowerMessage.includes('ba√±ada')) {
      orderAnalysis.products.forEach(product => {
        if (product.details) {
          product.details.tipoAlitas = 'ba√±adas';
        }
      });
    } else if (lowerMessage.includes('salsa aparte') || lowerMessage.includes('apart')) {
      orderAnalysis.products.forEach(product => {
        if (product.details) {
          product.details.tipoAlitas = 'salsa aparte';
        }
      });
    }
    
    // Detectar salsas
    const salsasTradicionales = ['bbq', 'miel mostaza', 'picante', 'envinada', 'frutos rojos', 'parmesano', 'maracuy√°', 'lim√≥n pimienta'];
    const salsasPremium = ['dulce ma√≠z', 'la original', 'cheddar', 'sour cream', 'pepinillo'];
    
    salsasTradicionales.forEach(salsa => {
      if (lowerMessage.includes(salsa)) {
        orderAnalysis.products.forEach(product => {
          if (product.details && product.details.salsas) {
            product.details.salsas.push({ nombre: salsa, tipo: 'tradicional' });
          }
        });
      }
    });
    
    salsasPremium.forEach(salsa => {
      if (lowerMessage.includes(salsa)) {
        orderAnalysis.products.forEach(product => {
          if (product.details && product.details.salsas) {
            product.details.salsas.push({ nombre: salsa, tipo: 'premium' });
          }
        });
      }
    });
    
    // Detectar acompa√±antes
    const acompanantes = ['papas criollas', 'cascos', 'yucas', 'arepitas', 'papas francesa'];
    acompanantes.forEach(acompanante => {
      if (lowerMessage.includes(acompanante)) {
        orderAnalysis.products.forEach(product => {
          if (product.details && product.details.acompanantes) {
            product.details.acompanantes.push(acompanante);
          }
        });
      }
    });
    
    // Detectar bebidas
    const bebidas = ['gaseosa', 'limonada', 'coca cola', 'pepsi'];
    bebidas.forEach(bebida => {
      if (lowerMessage.includes(bebida)) {
        orderAnalysis.products.forEach(product => {
          if (product.details && product.details.bebidas) {
            product.details.bebidas.push(bebida);
          }
        });
      }
    });
    
    // Verificar si a√∫n necesita clarificaci√≥n
    orderAnalysis.needsClarification = false;
    orderAnalysis.clarificationQuestions = [];
    
    orderAnalysis.products.forEach(product => {
      if (product.details) {
        // Verificar si falta informaci√≥n cr√≠tica
        if (!product.details.tipoAlitas) {
          orderAnalysis.needsClarification = true;
          if (!orderAnalysis.clarificationQuestions.includes('¬øQuieres las alitas ba√±adas o con la salsa aparte?')) {
            orderAnalysis.clarificationQuestions.push('¬øQuieres las alitas ba√±adas o con la salsa aparte?');
          }
        }
        
        if (!product.details.salsas || product.details.salsas.length === 0) {
          orderAnalysis.needsClarification = true;
          if (!orderAnalysis.clarificationQuestions.includes('¬øQu√© salsas prefieres?')) {
            orderAnalysis.clarificationQuestions.push('¬øQu√© salsas prefieres? Tenemos tradicionales (BBQ, miel mostaza, picante) y premium (cheddar, sour cream).');
          }
        }
        
        if (!product.details.acompanantes || product.details.acompanantes.length === 0) {
          orderAnalysis.needsClarification = true;
          if (!orderAnalysis.clarificationQuestions.includes('¬øQu√© acompa√±ante prefieres?')) {
            orderAnalysis.clarificationQuestions.push('¬øQu√© acompa√±ante prefieres? Papas criollas, cascos, yucas o arepitas.');
          }
        }
      }
    });
    
    return orderAnalysis;
  }

  // Generar respuesta de clarificaci√≥n
  generateClarificationResponse(orderAnalysis) {
    let response = `üçó *ACTUALIZANDO TU PEDIDO*\n\n`;
    
    orderAnalysis.products.forEach((product, index) => {
      response += `${index + 1}. ${product.name} - $${product.total.toLocaleString()}\n`;
      if (product.details) {
        if (product.details.tipoAlitas) {
          response += `   ‚Ä¢ Tipo: ${product.details.tipoAlitas}\n`;
        }
        if (product.details.salsas && product.details.salsas.length > 0) {
          response += `   ‚Ä¢ Salsas: ${product.details.salsas.map(s => s.nombre).join(', ')}\n`;
        }
        if (product.details.acompanantes && product.details.acompanantes.length > 0) {
          response += `   ‚Ä¢ Acompa√±antes: ${product.details.acompanantes.join(', ')}\n`;
        }
        if (product.details.bebidas && product.details.bebidas.length > 0) {
          response += `   ‚Ä¢ Bebidas: ${product.details.bebidas.join(', ')}\n`;
        }
      }
    });
    
    response += `\nüí∞ *TOTAL: $${orderAnalysis.total.toLocaleString()}*\n\n`;
    
    if (orderAnalysis.clarificationQuestions.length > 0) {
      response += `‚ùì *A√öN NECESITO SABER:*\n`;
      orderAnalysis.clarificationQuestions.forEach((question, index) => {
        response += `${index + 1}. ${question}\n`;
      });
    }
    
    return response;
  }
}

module.exports = AIService;