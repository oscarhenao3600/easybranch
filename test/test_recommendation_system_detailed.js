const RecommendationService = require('../src/services/RecommendationService');
const mongoose = require('mongoose');

require('dotenv').config({ path: './.env' });

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/easybranch';

async function testRecommendationSystem() {
    try {
        await mongoose.connect(MONGODB_URI);
        console.log('‚úÖ Conectado a MongoDB');

        const recommendationService = new RecommendationService();
        const phoneNumber = '573113414361';
        const branchId = '68c30abfe53cbd0d740e8c4e';
        const businessId = '68c30abfe53cbd0d740e8c4a';
        const peopleCount = 1;

        console.log('üß™ ===== PROBANDO SISTEMA DE RECOMENDACIONES =====');

        // Crear sesi√≥n
        console.log('\n1Ô∏è‚É£ Creando sesi√≥n...');
        const session = await recommendationService.createSession(phoneNumber, branchId, businessId, peopleCount);
        console.log('‚úÖ Sesi√≥n creada:', session.sessionId);

        // Obtener primera pregunta
        console.log('\n2Ô∏è‚É£ Obteniendo primera pregunta...');
        const question1 = await recommendationService.getNextQuestion(session.sessionId);
        console.log('‚úÖ Primera pregunta:', question1.question);

        // Procesar respuesta 1
        console.log('\n3Ô∏è‚É£ Procesando respuesta 1 (presupuesto)...');
        await recommendationService.processAnswer(session.sessionId, '4'); // M√°s de $60,000
        console.log('‚úÖ Respuesta 1 procesada');

        // Obtener segunda pregunta
        console.log('\n4Ô∏è‚É£ Obteniendo segunda pregunta...');
        const question2 = await recommendationService.getNextQuestion(session.sessionId);
        console.log('‚úÖ Segunda pregunta:', question2.question);

        // Procesar respuesta 2
        console.log('\n5Ô∏è‚É£ Procesando respuesta 2 (tipo de comida)...');
        await recommendationService.processAnswer(session.sessionId, '1'); // Desayuno
        console.log('‚úÖ Respuesta 2 procesada');

        // Procesar respuestas restantes
        console.log('\n6Ô∏è‚É£ Procesando respuestas restantes...');
        await recommendationService.processAnswer(session.sessionId, '5'); // Ninguna restricci√≥n
        await recommendationService.processAnswer(session.sessionId, '1'); // Colombiana
        await recommendationService.processAnswer(session.sessionId, '1'); // Comida casual

        // Generar recomendaciones
        console.log('\n7Ô∏è‚É£ Generando recomendaciones...');
        const recommendations = await recommendationService.generateRecommendations(session);
        console.log('‚úÖ Recomendaciones generadas:', recommendations);

        if (recommendations && recommendations.mainRecommendation) {
            console.log('\nüçΩÔ∏è RECOMENDACI√ìN PRINCIPAL:');
            console.log('   Producto:', recommendations.mainRecommendation.productName);
            console.log('   Precio:', recommendations.mainRecommendation.price);
            console.log('   Total:', recommendations.mainRecommendation.totalPrice);
            console.log('   Raz√≥n:', recommendations.mainRecommendation.reasoning);
        }

        if (recommendations && recommendations.alternatives) {
            console.log('\nüîÑ ALTERNATIVAS:');
            recommendations.alternatives.forEach((alt, index) => {
                console.log(`   ${index + 1}. ${alt.productName} - $${alt.price}`);
            });
        }

    } catch (error) {
        console.error('‚ùå Error:', error);
    } finally {
        await mongoose.disconnect();
        console.log('\nüëã Desconectado de MongoDB');
    }
}

testRecommendationSystem();
